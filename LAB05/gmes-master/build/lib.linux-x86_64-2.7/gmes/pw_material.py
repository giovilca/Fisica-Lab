# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_pw_material')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_pw_material')
    _pw_material = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pw_material', [dirname(__file__)])
        except ImportError:
            import _pw_material
            return _pw_material
        try:
            _mod = imp.load_module('_pw_material', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _pw_material = swig_import_helper()
    del swig_import_helper
else:
    import _pw_material
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class PwMaterialParam(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PwMaterialParam, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PwMaterialParam, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pw_material.new_PwMaterialParam()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_PwMaterialParam
    __del__ = lambda self: None
PwMaterialParam_swigregister = _pw_material.PwMaterialParam_swigregister
PwMaterialParam_swigregister(PwMaterialParam)

class ElectricParamReal(PwMaterialParam):
    __swig_setmethods__ = {}
    for _s in [PwMaterialParam]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ElectricParamReal, name, value)
    __swig_getmethods__ = {}
    for _s in [PwMaterialParam]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ElectricParamReal, name)
    __repr__ = _swig_repr
    __swig_setmethods__["eps_inf"] = _pw_material.ElectricParamReal_eps_inf_set
    __swig_getmethods__["eps_inf"] = _pw_material.ElectricParamReal_eps_inf_get
    if _newclass:
        eps_inf = _swig_property(_pw_material.ElectricParamReal_eps_inf_get, _pw_material.ElectricParamReal_eps_inf_set)

    def __init__(self):
        this = _pw_material.new_ElectricParamReal()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_ElectricParamReal
    __del__ = lambda self: None
ElectricParamReal_swigregister = _pw_material.ElectricParamReal_swigregister
ElectricParamReal_swigregister(ElectricParamReal)

class MagneticParamReal(PwMaterialParam):
    __swig_setmethods__ = {}
    for _s in [PwMaterialParam]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MagneticParamReal, name, value)
    __swig_getmethods__ = {}
    for _s in [PwMaterialParam]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MagneticParamReal, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mu_inf"] = _pw_material.MagneticParamReal_mu_inf_set
    __swig_getmethods__["mu_inf"] = _pw_material.MagneticParamReal_mu_inf_get
    if _newclass:
        mu_inf = _swig_property(_pw_material.MagneticParamReal_mu_inf_get, _pw_material.MagneticParamReal_mu_inf_set)

    def __init__(self):
        this = _pw_material.new_MagneticParamReal()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_MagneticParamReal
    __del__ = lambda self: None
MagneticParamReal_swigregister = _pw_material.MagneticParamReal_swigregister
MagneticParamReal_swigregister(MagneticParamReal)

class PwMaterialReal(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PwMaterialReal, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PwMaterialReal, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pw_material.delete_PwMaterialReal
    __del__ = lambda self: None

    def name(self):
        return _pw_material.PwMaterialReal_name(self)

    def attach(self, idx, parameter):
        return _pw_material.PwMaterialReal_attach(self, idx, parameter)

    def update_all(self, inplace_field, in_field1, in_field2, d1, d2, dt, n):
        return _pw_material.PwMaterialReal_update_all(self, inplace_field, in_field1, in_field2, d1, d2, dt, n)

    def find(self, idx):
        return _pw_material.PwMaterialReal_find(self, idx)

    def merge(self, pm):
        return _pw_material.PwMaterialReal_merge(self, pm)

    def idx_size(self):
        return _pw_material.PwMaterialReal_idx_size(self)
PwMaterialReal_swigregister = _pw_material.PwMaterialReal_swigregister
PwMaterialReal_swigregister(PwMaterialReal)

class MaterialElectricReal(PwMaterialReal):
    __swig_setmethods__ = {}
    for _s in [PwMaterialReal]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MaterialElectricReal, name, value)
    __swig_getmethods__ = {}
    for _s in [PwMaterialReal]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MaterialElectricReal, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def get_eps_inf(self, idx):
        return _pw_material.MaterialElectricReal_get_eps_inf(self, idx)

    def find(self, idx):
        return _pw_material.MaterialElectricReal_find(self, idx)
    __swig_destroy__ = _pw_material.delete_MaterialElectricReal
    __del__ = lambda self: None
MaterialElectricReal_swigregister = _pw_material.MaterialElectricReal_swigregister
MaterialElectricReal_swigregister(MaterialElectricReal)

class MaterialMagneticReal(PwMaterialReal):
    __swig_setmethods__ = {}
    for _s in [PwMaterialReal]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MaterialMagneticReal, name, value)
    __swig_getmethods__ = {}
    for _s in [PwMaterialReal]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MaterialMagneticReal, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def get_mu_inf(self, idx):
        return _pw_material.MaterialMagneticReal_get_mu_inf(self, idx)

    def find(self, idx):
        return _pw_material.MaterialMagneticReal_find(self, idx)
    __swig_destroy__ = _pw_material.delete_MaterialMagneticReal
    __del__ = lambda self: None
MaterialMagneticReal_swigregister = _pw_material.MaterialMagneticReal_swigregister
MaterialMagneticReal_swigregister(MaterialMagneticReal)

class DummyElectricParamReal(ElectricParamReal):
    __swig_setmethods__ = {}
    for _s in [ElectricParamReal]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DummyElectricParamReal, name, value)
    __swig_getmethods__ = {}
    for _s in [ElectricParamReal]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DummyElectricParamReal, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pw_material.new_DummyElectricParamReal()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_DummyElectricParamReal
    __del__ = lambda self: None
DummyElectricParamReal_swigregister = _pw_material.DummyElectricParamReal_swigregister
DummyElectricParamReal_swigregister(DummyElectricParamReal)

class DummyMagneticParamReal(MagneticParamReal):
    __swig_setmethods__ = {}
    for _s in [MagneticParamReal]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DummyMagneticParamReal, name, value)
    __swig_getmethods__ = {}
    for _s in [MagneticParamReal]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DummyMagneticParamReal, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pw_material.new_DummyMagneticParamReal()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_DummyMagneticParamReal
    __del__ = lambda self: None
DummyMagneticParamReal_swigregister = _pw_material.DummyMagneticParamReal_swigregister
DummyMagneticParamReal_swigregister(DummyMagneticParamReal)

class DummyElectricReal(MaterialElectricReal):
    __swig_setmethods__ = {}
    for _s in [MaterialElectricReal]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DummyElectricReal, name, value)
    __swig_getmethods__ = {}
    for _s in [MaterialElectricReal]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DummyElectricReal, name)
    __repr__ = _swig_repr

    def name(self):
        return _pw_material.DummyElectricReal_name(self)

    def get_eps_inf(self, idx):
        return _pw_material.DummyElectricReal_get_eps_inf(self, idx)

    def attach(self, idx, pm_param_ptr):
        return _pw_material.DummyElectricReal_attach(self, idx, pm_param_ptr)

    def merge(self, pm_ptr):
        return _pw_material.DummyElectricReal_merge(self, pm_ptr)

    def update_all(self, inplace_field, in_field1, in_field2, d1, d2, dt, n):
        return _pw_material.DummyElectricReal_update_all(self, inplace_field, in_field1, in_field2, d1, d2, dt, n)

    def __init__(self):
        this = _pw_material.new_DummyElectricReal()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_DummyElectricReal
    __del__ = lambda self: None
DummyElectricReal_swigregister = _pw_material.DummyElectricReal_swigregister
DummyElectricReal_swigregister(DummyElectricReal)

class DummyMagneticReal(MaterialMagneticReal):
    __swig_setmethods__ = {}
    for _s in [MaterialMagneticReal]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DummyMagneticReal, name, value)
    __swig_getmethods__ = {}
    for _s in [MaterialMagneticReal]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DummyMagneticReal, name)
    __repr__ = _swig_repr

    def name(self):
        return _pw_material.DummyMagneticReal_name(self)

    def get_mu_inf(self, idx):
        return _pw_material.DummyMagneticReal_get_mu_inf(self, idx)

    def attach(self, idx, pm_param_ptr):
        return _pw_material.DummyMagneticReal_attach(self, idx, pm_param_ptr)

    def merge(self, pm_ptr):
        return _pw_material.DummyMagneticReal_merge(self, pm_ptr)

    def update_all(self, inplace_field, in_field1, in_field2, d1, d2, dt, n):
        return _pw_material.DummyMagneticReal_update_all(self, inplace_field, in_field1, in_field2, d1, d2, dt, n)

    def __init__(self):
        this = _pw_material.new_DummyMagneticReal()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_DummyMagneticReal
    __del__ = lambda self: None
DummyMagneticReal_swigregister = _pw_material.DummyMagneticReal_swigregister
DummyMagneticReal_swigregister(DummyMagneticReal)

class DummyExReal(DummyElectricReal):
    __swig_setmethods__ = {}
    for _s in [DummyElectricReal]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DummyExReal, name, value)
    __swig_getmethods__ = {}
    for _s in [DummyElectricReal]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DummyExReal, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pw_material.new_DummyExReal()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_DummyExReal
    __del__ = lambda self: None
DummyExReal_swigregister = _pw_material.DummyExReal_swigregister
DummyExReal_swigregister(DummyExReal)

class DummyEyReal(DummyElectricReal):
    __swig_setmethods__ = {}
    for _s in [DummyElectricReal]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DummyEyReal, name, value)
    __swig_getmethods__ = {}
    for _s in [DummyElectricReal]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DummyEyReal, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pw_material.new_DummyEyReal()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_DummyEyReal
    __del__ = lambda self: None
DummyEyReal_swigregister = _pw_material.DummyEyReal_swigregister
DummyEyReal_swigregister(DummyEyReal)

class DummyEzReal(DummyElectricReal):
    __swig_setmethods__ = {}
    for _s in [DummyElectricReal]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DummyEzReal, name, value)
    __swig_getmethods__ = {}
    for _s in [DummyElectricReal]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DummyEzReal, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pw_material.new_DummyEzReal()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_DummyEzReal
    __del__ = lambda self: None
DummyEzReal_swigregister = _pw_material.DummyEzReal_swigregister
DummyEzReal_swigregister(DummyEzReal)

class DummyHxReal(DummyMagneticReal):
    __swig_setmethods__ = {}
    for _s in [DummyMagneticReal]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DummyHxReal, name, value)
    __swig_getmethods__ = {}
    for _s in [DummyMagneticReal]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DummyHxReal, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pw_material.new_DummyHxReal()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_DummyHxReal
    __del__ = lambda self: None
DummyHxReal_swigregister = _pw_material.DummyHxReal_swigregister
DummyHxReal_swigregister(DummyHxReal)

class DummyHyReal(DummyMagneticReal):
    __swig_setmethods__ = {}
    for _s in [DummyMagneticReal]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DummyHyReal, name, value)
    __swig_getmethods__ = {}
    for _s in [DummyMagneticReal]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DummyHyReal, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pw_material.new_DummyHyReal()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_DummyHyReal
    __del__ = lambda self: None
DummyHyReal_swigregister = _pw_material.DummyHyReal_swigregister
DummyHyReal_swigregister(DummyHyReal)

class DummyHzReal(DummyMagneticReal):
    __swig_setmethods__ = {}
    for _s in [DummyMagneticReal]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DummyHzReal, name, value)
    __swig_getmethods__ = {}
    for _s in [DummyMagneticReal]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DummyHzReal, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pw_material.new_DummyHzReal()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_DummyHzReal
    __del__ = lambda self: None
DummyHzReal_swigregister = _pw_material.DummyHzReal_swigregister
DummyHzReal_swigregister(DummyHzReal)

class ConstElectricParamReal(ElectricParamReal):
    __swig_setmethods__ = {}
    for _s in [ElectricParamReal]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstElectricParamReal, name, value)
    __swig_getmethods__ = {}
    for _s in [ElectricParamReal]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConstElectricParamReal, name)
    __repr__ = _swig_repr
    __swig_setmethods__["value"] = _pw_material.ConstElectricParamReal_value_set
    __swig_getmethods__["value"] = _pw_material.ConstElectricParamReal_value_get
    if _newclass:
        value = _swig_property(_pw_material.ConstElectricParamReal_value_get, _pw_material.ConstElectricParamReal_value_set)

    def __init__(self):
        this = _pw_material.new_ConstElectricParamReal()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_ConstElectricParamReal
    __del__ = lambda self: None
ConstElectricParamReal_swigregister = _pw_material.ConstElectricParamReal_swigregister
ConstElectricParamReal_swigregister(ConstElectricParamReal)

class ConstMagneticParamReal(MagneticParamReal):
    __swig_setmethods__ = {}
    for _s in [MagneticParamReal]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstMagneticParamReal, name, value)
    __swig_getmethods__ = {}
    for _s in [MagneticParamReal]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConstMagneticParamReal, name)
    __repr__ = _swig_repr
    __swig_setmethods__["value"] = _pw_material.ConstMagneticParamReal_value_set
    __swig_getmethods__["value"] = _pw_material.ConstMagneticParamReal_value_get
    if _newclass:
        value = _swig_property(_pw_material.ConstMagneticParamReal_value_get, _pw_material.ConstMagneticParamReal_value_set)

    def __init__(self):
        this = _pw_material.new_ConstMagneticParamReal()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_ConstMagneticParamReal
    __del__ = lambda self: None
ConstMagneticParamReal_swigregister = _pw_material.ConstMagneticParamReal_swigregister
ConstMagneticParamReal_swigregister(ConstMagneticParamReal)

class ConstElectricReal(MaterialElectricReal):
    __swig_setmethods__ = {}
    for _s in [MaterialElectricReal]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstElectricReal, name, value)
    __swig_getmethods__ = {}
    for _s in [MaterialElectricReal]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConstElectricReal, name)
    __repr__ = _swig_repr

    def name(self):
        return _pw_material.ConstElectricReal_name(self)

    def get_eps_inf(self, idx):
        return _pw_material.ConstElectricReal_get_eps_inf(self, idx)

    def attach(self, idx, pm_param_ptr):
        return _pw_material.ConstElectricReal_attach(self, idx, pm_param_ptr)

    def merge(self, pm_ptr):
        return _pw_material.ConstElectricReal_merge(self, pm_ptr)

    def update_all(self, inplace_field, in_field1, in_field2, d1, d2, dt, n):
        return _pw_material.ConstElectricReal_update_all(self, inplace_field, in_field1, in_field2, d1, d2, dt, n)

    def __init__(self):
        this = _pw_material.new_ConstElectricReal()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_ConstElectricReal
    __del__ = lambda self: None
ConstElectricReal_swigregister = _pw_material.ConstElectricReal_swigregister
ConstElectricReal_swigregister(ConstElectricReal)

class ConstMagneticReal(MaterialMagneticReal):
    __swig_setmethods__ = {}
    for _s in [MaterialMagneticReal]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstMagneticReal, name, value)
    __swig_getmethods__ = {}
    for _s in [MaterialMagneticReal]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConstMagneticReal, name)
    __repr__ = _swig_repr

    def name(self):
        return _pw_material.ConstMagneticReal_name(self)

    def get_mu_inf(self, idx):
        return _pw_material.ConstMagneticReal_get_mu_inf(self, idx)

    def attach(self, idx, pm_param_ptr):
        return _pw_material.ConstMagneticReal_attach(self, idx, pm_param_ptr)

    def merge(self, pm_ptr):
        return _pw_material.ConstMagneticReal_merge(self, pm_ptr)

    def update_all(self, inplace_field, in_field1, in_field2, d1, d2, dt, n):
        return _pw_material.ConstMagneticReal_update_all(self, inplace_field, in_field1, in_field2, d1, d2, dt, n)

    def __init__(self):
        this = _pw_material.new_ConstMagneticReal()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_ConstMagneticReal
    __del__ = lambda self: None
ConstMagneticReal_swigregister = _pw_material.ConstMagneticReal_swigregister
ConstMagneticReal_swigregister(ConstMagneticReal)

class ConstExReal(ConstElectricReal):
    __swig_setmethods__ = {}
    for _s in [ConstElectricReal]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstExReal, name, value)
    __swig_getmethods__ = {}
    for _s in [ConstElectricReal]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConstExReal, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pw_material.new_ConstExReal()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_ConstExReal
    __del__ = lambda self: None
ConstExReal_swigregister = _pw_material.ConstExReal_swigregister
ConstExReal_swigregister(ConstExReal)

class ConstEyReal(ConstElectricReal):
    __swig_setmethods__ = {}
    for _s in [ConstElectricReal]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstEyReal, name, value)
    __swig_getmethods__ = {}
    for _s in [ConstElectricReal]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConstEyReal, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pw_material.new_ConstEyReal()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_ConstEyReal
    __del__ = lambda self: None
ConstEyReal_swigregister = _pw_material.ConstEyReal_swigregister
ConstEyReal_swigregister(ConstEyReal)

class ConstEzReal(ConstElectricReal):
    __swig_setmethods__ = {}
    for _s in [ConstElectricReal]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstEzReal, name, value)
    __swig_getmethods__ = {}
    for _s in [ConstElectricReal]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConstEzReal, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pw_material.new_ConstEzReal()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_ConstEzReal
    __del__ = lambda self: None
ConstEzReal_swigregister = _pw_material.ConstEzReal_swigregister
ConstEzReal_swigregister(ConstEzReal)

class ConstHxReal(ConstMagneticReal):
    __swig_setmethods__ = {}
    for _s in [ConstMagneticReal]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstHxReal, name, value)
    __swig_getmethods__ = {}
    for _s in [ConstMagneticReal]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConstHxReal, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pw_material.new_ConstHxReal()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_ConstHxReal
    __del__ = lambda self: None
ConstHxReal_swigregister = _pw_material.ConstHxReal_swigregister
ConstHxReal_swigregister(ConstHxReal)

class ConstHyReal(ConstMagneticReal):
    __swig_setmethods__ = {}
    for _s in [ConstMagneticReal]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstHyReal, name, value)
    __swig_getmethods__ = {}
    for _s in [ConstMagneticReal]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConstHyReal, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pw_material.new_ConstHyReal()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_ConstHyReal
    __del__ = lambda self: None
ConstHyReal_swigregister = _pw_material.ConstHyReal_swigregister
ConstHyReal_swigregister(ConstHyReal)

class ConstHzReal(ConstMagneticReal):
    __swig_setmethods__ = {}
    for _s in [ConstMagneticReal]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstHzReal, name, value)
    __swig_getmethods__ = {}
    for _s in [ConstMagneticReal]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConstHzReal, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pw_material.new_ConstHzReal()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_ConstHzReal
    __del__ = lambda self: None
ConstHzReal_swigregister = _pw_material.ConstHzReal_swigregister
ConstHzReal_swigregister(ConstHzReal)

class DielectricElectricParamReal(ElectricParamReal):
    __swig_setmethods__ = {}
    for _s in [ElectricParamReal]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DielectricElectricParamReal, name, value)
    __swig_getmethods__ = {}
    for _s in [ElectricParamReal]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DielectricElectricParamReal, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pw_material.new_DielectricElectricParamReal()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_DielectricElectricParamReal
    __del__ = lambda self: None
DielectricElectricParamReal_swigregister = _pw_material.DielectricElectricParamReal_swigregister
DielectricElectricParamReal_swigregister(DielectricElectricParamReal)

class DielectricMagneticParamReal(MagneticParamReal):
    __swig_setmethods__ = {}
    for _s in [MagneticParamReal]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DielectricMagneticParamReal, name, value)
    __swig_getmethods__ = {}
    for _s in [MagneticParamReal]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DielectricMagneticParamReal, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pw_material.new_DielectricMagneticParamReal()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_DielectricMagneticParamReal
    __del__ = lambda self: None
DielectricMagneticParamReal_swigregister = _pw_material.DielectricMagneticParamReal_swigregister
DielectricMagneticParamReal_swigregister(DielectricMagneticParamReal)

class DielectricElectricReal(MaterialElectricReal):
    __swig_setmethods__ = {}
    for _s in [MaterialElectricReal]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DielectricElectricReal, name, value)
    __swig_getmethods__ = {}
    for _s in [MaterialElectricReal]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DielectricElectricReal, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def name(self):
        return _pw_material.DielectricElectricReal_name(self)

    def get_eps_inf(self, idx):
        return _pw_material.DielectricElectricReal_get_eps_inf(self, idx)

    def attach(self, idx, pm_param_ptr):
        return _pw_material.DielectricElectricReal_attach(self, idx, pm_param_ptr)

    def merge(self, pm_ptr):
        return _pw_material.DielectricElectricReal_merge(self, pm_ptr)
    __swig_destroy__ = _pw_material.delete_DielectricElectricReal
    __del__ = lambda self: None
DielectricElectricReal_swigregister = _pw_material.DielectricElectricReal_swigregister
DielectricElectricReal_swigregister(DielectricElectricReal)

class DielectricMagneticReal(MaterialMagneticReal):
    __swig_setmethods__ = {}
    for _s in [MaterialMagneticReal]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DielectricMagneticReal, name, value)
    __swig_getmethods__ = {}
    for _s in [MaterialMagneticReal]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DielectricMagneticReal, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def name(self):
        return _pw_material.DielectricMagneticReal_name(self)

    def get_mu_inf(self, idx):
        return _pw_material.DielectricMagneticReal_get_mu_inf(self, idx)

    def attach(self, idx, pm_param_ptr):
        return _pw_material.DielectricMagneticReal_attach(self, idx, pm_param_ptr)

    def merge(self, pm_ptr):
        return _pw_material.DielectricMagneticReal_merge(self, pm_ptr)
    __swig_destroy__ = _pw_material.delete_DielectricMagneticReal
    __del__ = lambda self: None
DielectricMagneticReal_swigregister = _pw_material.DielectricMagneticReal_swigregister
DielectricMagneticReal_swigregister(DielectricMagneticReal)

class DielectricExReal(DielectricElectricReal):
    __swig_setmethods__ = {}
    for _s in [DielectricElectricReal]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DielectricExReal, name, value)
    __swig_getmethods__ = {}
    for _s in [DielectricElectricReal]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DielectricExReal, name)
    __repr__ = _swig_repr

    def update_all(self, ex, hz, hy, dy, dz, dt, n):
        return _pw_material.DielectricExReal_update_all(self, ex, hz, hy, dy, dz, dt, n)

    def __init__(self):
        this = _pw_material.new_DielectricExReal()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_DielectricExReal
    __del__ = lambda self: None
DielectricExReal_swigregister = _pw_material.DielectricExReal_swigregister
DielectricExReal_swigregister(DielectricExReal)

class DielectricEyReal(DielectricElectricReal):
    __swig_setmethods__ = {}
    for _s in [DielectricElectricReal]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DielectricEyReal, name, value)
    __swig_getmethods__ = {}
    for _s in [DielectricElectricReal]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DielectricEyReal, name)
    __repr__ = _swig_repr

    def update_all(self, ey, hx, hz, dz, dx, dt, n):
        return _pw_material.DielectricEyReal_update_all(self, ey, hx, hz, dz, dx, dt, n)

    def __init__(self):
        this = _pw_material.new_DielectricEyReal()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_DielectricEyReal
    __del__ = lambda self: None
DielectricEyReal_swigregister = _pw_material.DielectricEyReal_swigregister
DielectricEyReal_swigregister(DielectricEyReal)

class DielectricEzReal(DielectricElectricReal):
    __swig_setmethods__ = {}
    for _s in [DielectricElectricReal]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DielectricEzReal, name, value)
    __swig_getmethods__ = {}
    for _s in [DielectricElectricReal]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DielectricEzReal, name)
    __repr__ = _swig_repr

    def update_all(self, ez, hy, hx, dx, dy, dt, n):
        return _pw_material.DielectricEzReal_update_all(self, ez, hy, hx, dx, dy, dt, n)

    def __init__(self):
        this = _pw_material.new_DielectricEzReal()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_DielectricEzReal
    __del__ = lambda self: None
DielectricEzReal_swigregister = _pw_material.DielectricEzReal_swigregister
DielectricEzReal_swigregister(DielectricEzReal)

class DielectricHxReal(DielectricMagneticReal):
    __swig_setmethods__ = {}
    for _s in [DielectricMagneticReal]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DielectricHxReal, name, value)
    __swig_getmethods__ = {}
    for _s in [DielectricMagneticReal]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DielectricHxReal, name)
    __repr__ = _swig_repr

    def update_all(self, hx, ez, ey, dy, dz, dt, n):
        return _pw_material.DielectricHxReal_update_all(self, hx, ez, ey, dy, dz, dt, n)

    def __init__(self):
        this = _pw_material.new_DielectricHxReal()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_DielectricHxReal
    __del__ = lambda self: None
DielectricHxReal_swigregister = _pw_material.DielectricHxReal_swigregister
DielectricHxReal_swigregister(DielectricHxReal)

class DielectricHyReal(DielectricMagneticReal):
    __swig_setmethods__ = {}
    for _s in [DielectricMagneticReal]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DielectricHyReal, name, value)
    __swig_getmethods__ = {}
    for _s in [DielectricMagneticReal]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DielectricHyReal, name)
    __repr__ = _swig_repr

    def update_all(self, hy, ex, ez, dz, dx, dt, n):
        return _pw_material.DielectricHyReal_update_all(self, hy, ex, ez, dz, dx, dt, n)

    def __init__(self):
        this = _pw_material.new_DielectricHyReal()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_DielectricHyReal
    __del__ = lambda self: None
DielectricHyReal_swigregister = _pw_material.DielectricHyReal_swigregister
DielectricHyReal_swigregister(DielectricHyReal)

class DielectricHzReal(DielectricMagneticReal):
    __swig_setmethods__ = {}
    for _s in [DielectricMagneticReal]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DielectricHzReal, name, value)
    __swig_getmethods__ = {}
    for _s in [DielectricMagneticReal]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DielectricHzReal, name)
    __repr__ = _swig_repr

    def update_all(self, hz, ey, ex, dx, dy, dt, n):
        return _pw_material.DielectricHzReal_update_all(self, hz, ey, ex, dx, dy, dt, n)

    def __init__(self):
        this = _pw_material.new_DielectricHzReal()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_DielectricHzReal
    __del__ = lambda self: None
DielectricHzReal_swigregister = _pw_material.DielectricHzReal_swigregister
DielectricHzReal_swigregister(DielectricHzReal)

class UpmlElectricParamReal(ElectricParamReal):
    __swig_setmethods__ = {}
    for _s in [ElectricParamReal]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UpmlElectricParamReal, name, value)
    __swig_getmethods__ = {}
    for _s in [ElectricParamReal]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UpmlElectricParamReal, name)
    __repr__ = _swig_repr
    __swig_setmethods__["c1"] = _pw_material.UpmlElectricParamReal_c1_set
    __swig_getmethods__["c1"] = _pw_material.UpmlElectricParamReal_c1_get
    if _newclass:
        c1 = _swig_property(_pw_material.UpmlElectricParamReal_c1_get, _pw_material.UpmlElectricParamReal_c1_set)
    __swig_setmethods__["c2"] = _pw_material.UpmlElectricParamReal_c2_set
    __swig_getmethods__["c2"] = _pw_material.UpmlElectricParamReal_c2_get
    if _newclass:
        c2 = _swig_property(_pw_material.UpmlElectricParamReal_c2_get, _pw_material.UpmlElectricParamReal_c2_set)
    __swig_setmethods__["c3"] = _pw_material.UpmlElectricParamReal_c3_set
    __swig_getmethods__["c3"] = _pw_material.UpmlElectricParamReal_c3_get
    if _newclass:
        c3 = _swig_property(_pw_material.UpmlElectricParamReal_c3_get, _pw_material.UpmlElectricParamReal_c3_set)
    __swig_setmethods__["c4"] = _pw_material.UpmlElectricParamReal_c4_set
    __swig_getmethods__["c4"] = _pw_material.UpmlElectricParamReal_c4_get
    if _newclass:
        c4 = _swig_property(_pw_material.UpmlElectricParamReal_c4_get, _pw_material.UpmlElectricParamReal_c4_set)
    __swig_setmethods__["c5"] = _pw_material.UpmlElectricParamReal_c5_set
    __swig_getmethods__["c5"] = _pw_material.UpmlElectricParamReal_c5_get
    if _newclass:
        c5 = _swig_property(_pw_material.UpmlElectricParamReal_c5_get, _pw_material.UpmlElectricParamReal_c5_set)
    __swig_setmethods__["c6"] = _pw_material.UpmlElectricParamReal_c6_set
    __swig_getmethods__["c6"] = _pw_material.UpmlElectricParamReal_c6_get
    if _newclass:
        c6 = _swig_property(_pw_material.UpmlElectricParamReal_c6_get, _pw_material.UpmlElectricParamReal_c6_set)
    __swig_setmethods__["d"] = _pw_material.UpmlElectricParamReal_d_set
    __swig_getmethods__["d"] = _pw_material.UpmlElectricParamReal_d_get
    if _newclass:
        d = _swig_property(_pw_material.UpmlElectricParamReal_d_get, _pw_material.UpmlElectricParamReal_d_set)

    def __init__(self):
        this = _pw_material.new_UpmlElectricParamReal()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_UpmlElectricParamReal
    __del__ = lambda self: None
UpmlElectricParamReal_swigregister = _pw_material.UpmlElectricParamReal_swigregister
UpmlElectricParamReal_swigregister(UpmlElectricParamReal)

class UpmlMagneticParamReal(MagneticParamReal):
    __swig_setmethods__ = {}
    for _s in [MagneticParamReal]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UpmlMagneticParamReal, name, value)
    __swig_getmethods__ = {}
    for _s in [MagneticParamReal]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UpmlMagneticParamReal, name)
    __repr__ = _swig_repr
    __swig_setmethods__["c1"] = _pw_material.UpmlMagneticParamReal_c1_set
    __swig_getmethods__["c1"] = _pw_material.UpmlMagneticParamReal_c1_get
    if _newclass:
        c1 = _swig_property(_pw_material.UpmlMagneticParamReal_c1_get, _pw_material.UpmlMagneticParamReal_c1_set)
    __swig_setmethods__["c2"] = _pw_material.UpmlMagneticParamReal_c2_set
    __swig_getmethods__["c2"] = _pw_material.UpmlMagneticParamReal_c2_get
    if _newclass:
        c2 = _swig_property(_pw_material.UpmlMagneticParamReal_c2_get, _pw_material.UpmlMagneticParamReal_c2_set)
    __swig_setmethods__["c3"] = _pw_material.UpmlMagneticParamReal_c3_set
    __swig_getmethods__["c3"] = _pw_material.UpmlMagneticParamReal_c3_get
    if _newclass:
        c3 = _swig_property(_pw_material.UpmlMagneticParamReal_c3_get, _pw_material.UpmlMagneticParamReal_c3_set)
    __swig_setmethods__["c4"] = _pw_material.UpmlMagneticParamReal_c4_set
    __swig_getmethods__["c4"] = _pw_material.UpmlMagneticParamReal_c4_get
    if _newclass:
        c4 = _swig_property(_pw_material.UpmlMagneticParamReal_c4_get, _pw_material.UpmlMagneticParamReal_c4_set)
    __swig_setmethods__["c5"] = _pw_material.UpmlMagneticParamReal_c5_set
    __swig_getmethods__["c5"] = _pw_material.UpmlMagneticParamReal_c5_get
    if _newclass:
        c5 = _swig_property(_pw_material.UpmlMagneticParamReal_c5_get, _pw_material.UpmlMagneticParamReal_c5_set)
    __swig_setmethods__["c6"] = _pw_material.UpmlMagneticParamReal_c6_set
    __swig_getmethods__["c6"] = _pw_material.UpmlMagneticParamReal_c6_get
    if _newclass:
        c6 = _swig_property(_pw_material.UpmlMagneticParamReal_c6_get, _pw_material.UpmlMagneticParamReal_c6_set)
    __swig_setmethods__["b"] = _pw_material.UpmlMagneticParamReal_b_set
    __swig_getmethods__["b"] = _pw_material.UpmlMagneticParamReal_b_get
    if _newclass:
        b = _swig_property(_pw_material.UpmlMagneticParamReal_b_get, _pw_material.UpmlMagneticParamReal_b_set)

    def __init__(self):
        this = _pw_material.new_UpmlMagneticParamReal()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_UpmlMagneticParamReal
    __del__ = lambda self: None
UpmlMagneticParamReal_swigregister = _pw_material.UpmlMagneticParamReal_swigregister
UpmlMagneticParamReal_swigregister(UpmlMagneticParamReal)

class UpmlElectricReal(MaterialElectricReal):
    __swig_setmethods__ = {}
    for _s in [MaterialElectricReal]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UpmlElectricReal, name, value)
    __swig_getmethods__ = {}
    for _s in [MaterialElectricReal]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UpmlElectricReal, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def name(self):
        return _pw_material.UpmlElectricReal_name(self)

    def get_eps_inf(self, idx):
        return _pw_material.UpmlElectricReal_get_eps_inf(self, idx)

    def attach(self, idx, pm_param_ptr):
        return _pw_material.UpmlElectricReal_attach(self, idx, pm_param_ptr)

    def merge(self, pm_ptr):
        return _pw_material.UpmlElectricReal_merge(self, pm_ptr)
    __swig_destroy__ = _pw_material.delete_UpmlElectricReal
    __del__ = lambda self: None
UpmlElectricReal_swigregister = _pw_material.UpmlElectricReal_swigregister
UpmlElectricReal_swigregister(UpmlElectricReal)

class UpmlMagneticReal(MaterialMagneticReal):
    __swig_setmethods__ = {}
    for _s in [MaterialMagneticReal]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UpmlMagneticReal, name, value)
    __swig_getmethods__ = {}
    for _s in [MaterialMagneticReal]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UpmlMagneticReal, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def name(self):
        return _pw_material.UpmlMagneticReal_name(self)

    def get_mu_inf(self, idx):
        return _pw_material.UpmlMagneticReal_get_mu_inf(self, idx)

    def attach(self, idx, pm_param_ptr):
        return _pw_material.UpmlMagneticReal_attach(self, idx, pm_param_ptr)

    def merge(self, pm_ptr):
        return _pw_material.UpmlMagneticReal_merge(self, pm_ptr)
    __swig_destroy__ = _pw_material.delete_UpmlMagneticReal
    __del__ = lambda self: None
UpmlMagneticReal_swigregister = _pw_material.UpmlMagneticReal_swigregister
UpmlMagneticReal_swigregister(UpmlMagneticReal)

class UpmlExReal(UpmlElectricReal):
    __swig_setmethods__ = {}
    for _s in [UpmlElectricReal]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UpmlExReal, name, value)
    __swig_getmethods__ = {}
    for _s in [UpmlElectricReal]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UpmlExReal, name)
    __repr__ = _swig_repr

    def update_all(self, ex, hz, hy, dy, dz, dt, n):
        return _pw_material.UpmlExReal_update_all(self, ex, hz, hy, dy, dz, dt, n)

    def __init__(self):
        this = _pw_material.new_UpmlExReal()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_UpmlExReal
    __del__ = lambda self: None
UpmlExReal_swigregister = _pw_material.UpmlExReal_swigregister
UpmlExReal_swigregister(UpmlExReal)

class UpmlEyReal(UpmlElectricReal):
    __swig_setmethods__ = {}
    for _s in [UpmlElectricReal]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UpmlEyReal, name, value)
    __swig_getmethods__ = {}
    for _s in [UpmlElectricReal]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UpmlEyReal, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pw_material.new_UpmlEyReal()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_UpmlEyReal
    __del__ = lambda self: None
UpmlEyReal_swigregister = _pw_material.UpmlEyReal_swigregister
UpmlEyReal_swigregister(UpmlEyReal)

class UpmlEzReal(UpmlElectricReal):
    __swig_setmethods__ = {}
    for _s in [UpmlElectricReal]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UpmlEzReal, name, value)
    __swig_getmethods__ = {}
    for _s in [UpmlElectricReal]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UpmlEzReal, name)
    __repr__ = _swig_repr

    def update_all(self, ez, hy, hx, dx, dy, dt, n):
        return _pw_material.UpmlEzReal_update_all(self, ez, hy, hx, dx, dy, dt, n)

    def __init__(self):
        this = _pw_material.new_UpmlEzReal()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_UpmlEzReal
    __del__ = lambda self: None
UpmlEzReal_swigregister = _pw_material.UpmlEzReal_swigregister
UpmlEzReal_swigregister(UpmlEzReal)

class UpmlHxReal(UpmlMagneticReal):
    __swig_setmethods__ = {}
    for _s in [UpmlMagneticReal]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UpmlHxReal, name, value)
    __swig_getmethods__ = {}
    for _s in [UpmlMagneticReal]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UpmlHxReal, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pw_material.new_UpmlHxReal()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_UpmlHxReal
    __del__ = lambda self: None
UpmlHxReal_swigregister = _pw_material.UpmlHxReal_swigregister
UpmlHxReal_swigregister(UpmlHxReal)

class UpmlHyReal(UpmlMagneticReal):
    __swig_setmethods__ = {}
    for _s in [UpmlMagneticReal]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UpmlHyReal, name, value)
    __swig_getmethods__ = {}
    for _s in [UpmlMagneticReal]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UpmlHyReal, name)
    __repr__ = _swig_repr

    def update_all(self, hy, ex, ez, dz, dx, dt, n):
        return _pw_material.UpmlHyReal_update_all(self, hy, ex, ez, dz, dx, dt, n)

    def __init__(self):
        this = _pw_material.new_UpmlHyReal()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_UpmlHyReal
    __del__ = lambda self: None
UpmlHyReal_swigregister = _pw_material.UpmlHyReal_swigregister
UpmlHyReal_swigregister(UpmlHyReal)

class UpmlHzReal(UpmlMagneticReal):
    __swig_setmethods__ = {}
    for _s in [UpmlMagneticReal]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UpmlHzReal, name, value)
    __swig_getmethods__ = {}
    for _s in [UpmlMagneticReal]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UpmlHzReal, name)
    __repr__ = _swig_repr

    def update_all(self, hz, ey, ex, dx, dy, dt, n):
        return _pw_material.UpmlHzReal_update_all(self, hz, ey, ex, dx, dy, dt, n)

    def __init__(self):
        this = _pw_material.new_UpmlHzReal()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_UpmlHzReal
    __del__ = lambda self: None
UpmlHzReal_swigregister = _pw_material.UpmlHzReal_swigregister
UpmlHzReal_swigregister(UpmlHzReal)

class CpmlElectricParamReal(ElectricParamReal):
    __swig_setmethods__ = {}
    for _s in [ElectricParamReal]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CpmlElectricParamReal, name, value)
    __swig_getmethods__ = {}
    for _s in [ElectricParamReal]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CpmlElectricParamReal, name)
    __repr__ = _swig_repr
    __swig_setmethods__["b1"] = _pw_material.CpmlElectricParamReal_b1_set
    __swig_getmethods__["b1"] = _pw_material.CpmlElectricParamReal_b1_get
    if _newclass:
        b1 = _swig_property(_pw_material.CpmlElectricParamReal_b1_get, _pw_material.CpmlElectricParamReal_b1_set)
    __swig_setmethods__["b2"] = _pw_material.CpmlElectricParamReal_b2_set
    __swig_getmethods__["b2"] = _pw_material.CpmlElectricParamReal_b2_get
    if _newclass:
        b2 = _swig_property(_pw_material.CpmlElectricParamReal_b2_get, _pw_material.CpmlElectricParamReal_b2_set)
    __swig_setmethods__["c1"] = _pw_material.CpmlElectricParamReal_c1_set
    __swig_getmethods__["c1"] = _pw_material.CpmlElectricParamReal_c1_get
    if _newclass:
        c1 = _swig_property(_pw_material.CpmlElectricParamReal_c1_get, _pw_material.CpmlElectricParamReal_c1_set)
    __swig_setmethods__["c2"] = _pw_material.CpmlElectricParamReal_c2_set
    __swig_getmethods__["c2"] = _pw_material.CpmlElectricParamReal_c2_get
    if _newclass:
        c2 = _swig_property(_pw_material.CpmlElectricParamReal_c2_get, _pw_material.CpmlElectricParamReal_c2_set)
    __swig_setmethods__["kappa1"] = _pw_material.CpmlElectricParamReal_kappa1_set
    __swig_getmethods__["kappa1"] = _pw_material.CpmlElectricParamReal_kappa1_get
    if _newclass:
        kappa1 = _swig_property(_pw_material.CpmlElectricParamReal_kappa1_get, _pw_material.CpmlElectricParamReal_kappa1_set)
    __swig_setmethods__["kappa2"] = _pw_material.CpmlElectricParamReal_kappa2_set
    __swig_getmethods__["kappa2"] = _pw_material.CpmlElectricParamReal_kappa2_get
    if _newclass:
        kappa2 = _swig_property(_pw_material.CpmlElectricParamReal_kappa2_get, _pw_material.CpmlElectricParamReal_kappa2_set)
    __swig_setmethods__["psi1"] = _pw_material.CpmlElectricParamReal_psi1_set
    __swig_getmethods__["psi1"] = _pw_material.CpmlElectricParamReal_psi1_get
    if _newclass:
        psi1 = _swig_property(_pw_material.CpmlElectricParamReal_psi1_get, _pw_material.CpmlElectricParamReal_psi1_set)
    __swig_setmethods__["psi2"] = _pw_material.CpmlElectricParamReal_psi2_set
    __swig_getmethods__["psi2"] = _pw_material.CpmlElectricParamReal_psi2_get
    if _newclass:
        psi2 = _swig_property(_pw_material.CpmlElectricParamReal_psi2_get, _pw_material.CpmlElectricParamReal_psi2_set)

    def __init__(self):
        this = _pw_material.new_CpmlElectricParamReal()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_CpmlElectricParamReal
    __del__ = lambda self: None
CpmlElectricParamReal_swigregister = _pw_material.CpmlElectricParamReal_swigregister
CpmlElectricParamReal_swigregister(CpmlElectricParamReal)

class CpmlMagneticParamReal(MagneticParamReal):
    __swig_setmethods__ = {}
    for _s in [MagneticParamReal]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CpmlMagneticParamReal, name, value)
    __swig_getmethods__ = {}
    for _s in [MagneticParamReal]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CpmlMagneticParamReal, name)
    __repr__ = _swig_repr
    __swig_setmethods__["b1"] = _pw_material.CpmlMagneticParamReal_b1_set
    __swig_getmethods__["b1"] = _pw_material.CpmlMagneticParamReal_b1_get
    if _newclass:
        b1 = _swig_property(_pw_material.CpmlMagneticParamReal_b1_get, _pw_material.CpmlMagneticParamReal_b1_set)
    __swig_setmethods__["b2"] = _pw_material.CpmlMagneticParamReal_b2_set
    __swig_getmethods__["b2"] = _pw_material.CpmlMagneticParamReal_b2_get
    if _newclass:
        b2 = _swig_property(_pw_material.CpmlMagneticParamReal_b2_get, _pw_material.CpmlMagneticParamReal_b2_set)
    __swig_setmethods__["c1"] = _pw_material.CpmlMagneticParamReal_c1_set
    __swig_getmethods__["c1"] = _pw_material.CpmlMagneticParamReal_c1_get
    if _newclass:
        c1 = _swig_property(_pw_material.CpmlMagneticParamReal_c1_get, _pw_material.CpmlMagneticParamReal_c1_set)
    __swig_setmethods__["c2"] = _pw_material.CpmlMagneticParamReal_c2_set
    __swig_getmethods__["c2"] = _pw_material.CpmlMagneticParamReal_c2_get
    if _newclass:
        c2 = _swig_property(_pw_material.CpmlMagneticParamReal_c2_get, _pw_material.CpmlMagneticParamReal_c2_set)
    __swig_setmethods__["kappa1"] = _pw_material.CpmlMagneticParamReal_kappa1_set
    __swig_getmethods__["kappa1"] = _pw_material.CpmlMagneticParamReal_kappa1_get
    if _newclass:
        kappa1 = _swig_property(_pw_material.CpmlMagneticParamReal_kappa1_get, _pw_material.CpmlMagneticParamReal_kappa1_set)
    __swig_setmethods__["kappa2"] = _pw_material.CpmlMagneticParamReal_kappa2_set
    __swig_getmethods__["kappa2"] = _pw_material.CpmlMagneticParamReal_kappa2_get
    if _newclass:
        kappa2 = _swig_property(_pw_material.CpmlMagneticParamReal_kappa2_get, _pw_material.CpmlMagneticParamReal_kappa2_set)
    __swig_setmethods__["psi1"] = _pw_material.CpmlMagneticParamReal_psi1_set
    __swig_getmethods__["psi1"] = _pw_material.CpmlMagneticParamReal_psi1_get
    if _newclass:
        psi1 = _swig_property(_pw_material.CpmlMagneticParamReal_psi1_get, _pw_material.CpmlMagneticParamReal_psi1_set)
    __swig_setmethods__["psi2"] = _pw_material.CpmlMagneticParamReal_psi2_set
    __swig_getmethods__["psi2"] = _pw_material.CpmlMagneticParamReal_psi2_get
    if _newclass:
        psi2 = _swig_property(_pw_material.CpmlMagneticParamReal_psi2_get, _pw_material.CpmlMagneticParamReal_psi2_set)

    def __init__(self):
        this = _pw_material.new_CpmlMagneticParamReal()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_CpmlMagneticParamReal
    __del__ = lambda self: None
CpmlMagneticParamReal_swigregister = _pw_material.CpmlMagneticParamReal_swigregister
CpmlMagneticParamReal_swigregister(CpmlMagneticParamReal)

class CpmlElectricReal(MaterialElectricReal):
    __swig_setmethods__ = {}
    for _s in [MaterialElectricReal]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CpmlElectricReal, name, value)
    __swig_getmethods__ = {}
    for _s in [MaterialElectricReal]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CpmlElectricReal, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def name(self):
        return _pw_material.CpmlElectricReal_name(self)

    def get_eps_inf(self, idx):
        return _pw_material.CpmlElectricReal_get_eps_inf(self, idx)

    def attach(self, idx, pm_param_ptr):
        return _pw_material.CpmlElectricReal_attach(self, idx, pm_param_ptr)

    def merge(self, pm_ptr):
        return _pw_material.CpmlElectricReal_merge(self, pm_ptr)
    __swig_destroy__ = _pw_material.delete_CpmlElectricReal
    __del__ = lambda self: None
CpmlElectricReal_swigregister = _pw_material.CpmlElectricReal_swigregister
CpmlElectricReal_swigregister(CpmlElectricReal)

class CpmlMagneticReal(MaterialMagneticReal):
    __swig_setmethods__ = {}
    for _s in [MaterialMagneticReal]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CpmlMagneticReal, name, value)
    __swig_getmethods__ = {}
    for _s in [MaterialMagneticReal]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CpmlMagneticReal, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def name(self):
        return _pw_material.CpmlMagneticReal_name(self)

    def get_mu_inf(self, idx):
        return _pw_material.CpmlMagneticReal_get_mu_inf(self, idx)

    def attach(self, idx, pm_param_ptr):
        return _pw_material.CpmlMagneticReal_attach(self, idx, pm_param_ptr)

    def merge(self, pm_ptr):
        return _pw_material.CpmlMagneticReal_merge(self, pm_ptr)
    __swig_destroy__ = _pw_material.delete_CpmlMagneticReal
    __del__ = lambda self: None
CpmlMagneticReal_swigregister = _pw_material.CpmlMagneticReal_swigregister
CpmlMagneticReal_swigregister(CpmlMagneticReal)

class CpmlExReal(CpmlElectricReal):
    __swig_setmethods__ = {}
    for _s in [CpmlElectricReal]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CpmlExReal, name, value)
    __swig_getmethods__ = {}
    for _s in [CpmlElectricReal]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CpmlExReal, name)
    __repr__ = _swig_repr

    def update_all(self, ex, hz, hy, dy, dz, dt, n):
        return _pw_material.CpmlExReal_update_all(self, ex, hz, hy, dy, dz, dt, n)

    def __init__(self):
        this = _pw_material.new_CpmlExReal()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_CpmlExReal
    __del__ = lambda self: None
CpmlExReal_swigregister = _pw_material.CpmlExReal_swigregister
CpmlExReal_swigregister(CpmlExReal)

class CpmlEyReal(CpmlElectricReal):
    __swig_setmethods__ = {}
    for _s in [CpmlElectricReal]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CpmlEyReal, name, value)
    __swig_getmethods__ = {}
    for _s in [CpmlElectricReal]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CpmlEyReal, name)
    __repr__ = _swig_repr

    def update_all(self, ey, hx, hz, dz, dx, dt, n):
        return _pw_material.CpmlEyReal_update_all(self, ey, hx, hz, dz, dx, dt, n)

    def __init__(self):
        this = _pw_material.new_CpmlEyReal()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_CpmlEyReal
    __del__ = lambda self: None
CpmlEyReal_swigregister = _pw_material.CpmlEyReal_swigregister
CpmlEyReal_swigregister(CpmlEyReal)

class CpmlEzReal(CpmlElectricReal):
    __swig_setmethods__ = {}
    for _s in [CpmlElectricReal]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CpmlEzReal, name, value)
    __swig_getmethods__ = {}
    for _s in [CpmlElectricReal]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CpmlEzReal, name)
    __repr__ = _swig_repr

    def update_all(self, ez, hy, hx, dx, dy, dt, n):
        return _pw_material.CpmlEzReal_update_all(self, ez, hy, hx, dx, dy, dt, n)

    def __init__(self):
        this = _pw_material.new_CpmlEzReal()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_CpmlEzReal
    __del__ = lambda self: None
CpmlEzReal_swigregister = _pw_material.CpmlEzReal_swigregister
CpmlEzReal_swigregister(CpmlEzReal)

class CpmlHxReal(CpmlMagneticReal):
    __swig_setmethods__ = {}
    for _s in [CpmlMagneticReal]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CpmlHxReal, name, value)
    __swig_getmethods__ = {}
    for _s in [CpmlMagneticReal]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CpmlHxReal, name)
    __repr__ = _swig_repr

    def update_all(self, hx, ez, ey, dy, dz, dt, n):
        return _pw_material.CpmlHxReal_update_all(self, hx, ez, ey, dy, dz, dt, n)

    def __init__(self):
        this = _pw_material.new_CpmlHxReal()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_CpmlHxReal
    __del__ = lambda self: None
CpmlHxReal_swigregister = _pw_material.CpmlHxReal_swigregister
CpmlHxReal_swigregister(CpmlHxReal)

class CpmlHyReal(CpmlMagneticReal):
    __swig_setmethods__ = {}
    for _s in [CpmlMagneticReal]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CpmlHyReal, name, value)
    __swig_getmethods__ = {}
    for _s in [CpmlMagneticReal]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CpmlHyReal, name)
    __repr__ = _swig_repr

    def update_all(self, hy, ex, ez, dz, dx, dt, n):
        return _pw_material.CpmlHyReal_update_all(self, hy, ex, ez, dz, dx, dt, n)

    def __init__(self):
        this = _pw_material.new_CpmlHyReal()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_CpmlHyReal
    __del__ = lambda self: None
CpmlHyReal_swigregister = _pw_material.CpmlHyReal_swigregister
CpmlHyReal_swigregister(CpmlHyReal)

class CpmlHzReal(CpmlMagneticReal):
    __swig_setmethods__ = {}
    for _s in [CpmlMagneticReal]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CpmlHzReal, name, value)
    __swig_getmethods__ = {}
    for _s in [CpmlMagneticReal]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CpmlHzReal, name)
    __repr__ = _swig_repr

    def update_all(self, hz, ey, ex, dx, dy, dt, n):
        return _pw_material.CpmlHzReal_update_all(self, hz, ey, ex, dx, dy, dt, n)

    def __init__(self):
        this = _pw_material.new_CpmlHzReal()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_CpmlHzReal
    __del__ = lambda self: None
CpmlHzReal_swigregister = _pw_material.CpmlHzReal_swigregister
CpmlHzReal_swigregister(CpmlHzReal)

class DrudeElectricParamReal(ElectricParamReal):
    __swig_setmethods__ = {}
    for _s in [ElectricParamReal]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DrudeElectricParamReal, name, value)
    __swig_getmethods__ = {}
    for _s in [ElectricParamReal]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DrudeElectricParamReal, name)
    __repr__ = _swig_repr
    __swig_setmethods__["a"] = _pw_material.DrudeElectricParamReal_a_set
    __swig_getmethods__["a"] = _pw_material.DrudeElectricParamReal_a_get
    if _newclass:
        a = _swig_property(_pw_material.DrudeElectricParamReal_a_get, _pw_material.DrudeElectricParamReal_a_set)
    __swig_setmethods__["c"] = _pw_material.DrudeElectricParamReal_c_set
    __swig_getmethods__["c"] = _pw_material.DrudeElectricParamReal_c_get
    if _newclass:
        c = _swig_property(_pw_material.DrudeElectricParamReal_c_get, _pw_material.DrudeElectricParamReal_c_set)
    __swig_setmethods__["q_now"] = _pw_material.DrudeElectricParamReal_q_now_set
    __swig_getmethods__["q_now"] = _pw_material.DrudeElectricParamReal_q_now_get
    if _newclass:
        q_now = _swig_property(_pw_material.DrudeElectricParamReal_q_now_get, _pw_material.DrudeElectricParamReal_q_now_set)
    __swig_setmethods__["q_new"] = _pw_material.DrudeElectricParamReal_q_new_set
    __swig_getmethods__["q_new"] = _pw_material.DrudeElectricParamReal_q_new_get
    if _newclass:
        q_new = _swig_property(_pw_material.DrudeElectricParamReal_q_new_get, _pw_material.DrudeElectricParamReal_q_new_set)

    def set(self, a, c):
        return _pw_material.DrudeElectricParamReal_set(self, a, c)

    def __init__(self):
        this = _pw_material.new_DrudeElectricParamReal()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_DrudeElectricParamReal
    __del__ = lambda self: None
DrudeElectricParamReal_swigregister = _pw_material.DrudeElectricParamReal_swigregister
DrudeElectricParamReal_swigregister(DrudeElectricParamReal)

class DrudeMagneticParamReal(MagneticParamReal):
    __swig_setmethods__ = {}
    for _s in [MagneticParamReal]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DrudeMagneticParamReal, name, value)
    __swig_getmethods__ = {}
    for _s in [MagneticParamReal]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DrudeMagneticParamReal, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pw_material.new_DrudeMagneticParamReal()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_DrudeMagneticParamReal
    __del__ = lambda self: None
DrudeMagneticParamReal_swigregister = _pw_material.DrudeMagneticParamReal_swigregister
DrudeMagneticParamReal_swigregister(DrudeMagneticParamReal)

class DrudeElectricReal(MaterialElectricReal):
    __swig_setmethods__ = {}
    for _s in [MaterialElectricReal]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DrudeElectricReal, name, value)
    __swig_getmethods__ = {}
    for _s in [MaterialElectricReal]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DrudeElectricReal, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def name(self):
        return _pw_material.DrudeElectricReal_name(self)

    def get_eps_inf(self, idx):
        return _pw_material.DrudeElectricReal_get_eps_inf(self, idx)

    def attach(self, idx, pm_param_ptr):
        return _pw_material.DrudeElectricReal_attach(self, idx, pm_param_ptr)

    def merge(self, pm_ptr):
        return _pw_material.DrudeElectricReal_merge(self, pm_ptr)

    def dps_sum(self, init, drude_param):
        return _pw_material.DrudeElectricReal_dps_sum(self, init, drude_param)

    def update_q(self, e_now, drude_param):
        return _pw_material.DrudeElectricReal_update_q(self, e_now, drude_param)
    __swig_destroy__ = _pw_material.delete_DrudeElectricReal
    __del__ = lambda self: None
DrudeElectricReal_swigregister = _pw_material.DrudeElectricReal_swigregister
DrudeElectricReal_swigregister(DrudeElectricReal)

class DrudeExReal(DrudeElectricReal):
    __swig_setmethods__ = {}
    for _s in [DrudeElectricReal]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DrudeExReal, name, value)
    __swig_getmethods__ = {}
    for _s in [DrudeElectricReal]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DrudeExReal, name)
    __repr__ = _swig_repr

    def update_all(self, ex, hz, hy, dy, dz, dt, n):
        return _pw_material.DrudeExReal_update_all(self, ex, hz, hy, dy, dz, dt, n)

    def __init__(self):
        this = _pw_material.new_DrudeExReal()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_DrudeExReal
    __del__ = lambda self: None
DrudeExReal_swigregister = _pw_material.DrudeExReal_swigregister
DrudeExReal_swigregister(DrudeExReal)

class DrudeEyReal(DrudeElectricReal):
    __swig_setmethods__ = {}
    for _s in [DrudeElectricReal]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DrudeEyReal, name, value)
    __swig_getmethods__ = {}
    for _s in [DrudeElectricReal]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DrudeEyReal, name)
    __repr__ = _swig_repr

    def update_all(self, ey, hx, hz, dz, dx, dt, n):
        return _pw_material.DrudeEyReal_update_all(self, ey, hx, hz, dz, dx, dt, n)

    def __init__(self):
        this = _pw_material.new_DrudeEyReal()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_DrudeEyReal
    __del__ = lambda self: None
DrudeEyReal_swigregister = _pw_material.DrudeEyReal_swigregister
DrudeEyReal_swigregister(DrudeEyReal)

class DrudeEzReal(DrudeElectricReal):
    __swig_setmethods__ = {}
    for _s in [DrudeElectricReal]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DrudeEzReal, name, value)
    __swig_getmethods__ = {}
    for _s in [DrudeElectricReal]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DrudeEzReal, name)
    __repr__ = _swig_repr

    def update_all(self, ez, hy, hx, dx, dy, dt, n):
        return _pw_material.DrudeEzReal_update_all(self, ez, hy, hx, dx, dy, dt, n)

    def __init__(self):
        this = _pw_material.new_DrudeEzReal()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_DrudeEzReal
    __del__ = lambda self: None
DrudeEzReal_swigregister = _pw_material.DrudeEzReal_swigregister
DrudeEzReal_swigregister(DrudeEzReal)

class DrudeHxReal(DielectricHxReal):
    __swig_setmethods__ = {}
    for _s in [DielectricHxReal]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DrudeHxReal, name, value)
    __swig_getmethods__ = {}
    for _s in [DielectricHxReal]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DrudeHxReal, name)
    __repr__ = _swig_repr

    def name(self):
        return _pw_material.DrudeHxReal_name(self)

    def __init__(self):
        this = _pw_material.new_DrudeHxReal()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_DrudeHxReal
    __del__ = lambda self: None
DrudeHxReal_swigregister = _pw_material.DrudeHxReal_swigregister
DrudeHxReal_swigregister(DrudeHxReal)

class DrudeHyReal(DielectricHyReal):
    __swig_setmethods__ = {}
    for _s in [DielectricHyReal]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DrudeHyReal, name, value)
    __swig_getmethods__ = {}
    for _s in [DielectricHyReal]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DrudeHyReal, name)
    __repr__ = _swig_repr

    def name(self):
        return _pw_material.DrudeHyReal_name(self)

    def __init__(self):
        this = _pw_material.new_DrudeHyReal()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_DrudeHyReal
    __del__ = lambda self: None
DrudeHyReal_swigregister = _pw_material.DrudeHyReal_swigregister
DrudeHyReal_swigregister(DrudeHyReal)

class DrudeHzReal(DielectricHzReal):
    __swig_setmethods__ = {}
    for _s in [DielectricHzReal]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DrudeHzReal, name, value)
    __swig_getmethods__ = {}
    for _s in [DielectricHzReal]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DrudeHzReal, name)
    __repr__ = _swig_repr

    def name(self):
        return _pw_material.DrudeHzReal_name(self)

    def __init__(self):
        this = _pw_material.new_DrudeHzReal()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_DrudeHzReal
    __del__ = lambda self: None
DrudeHzReal_swigregister = _pw_material.DrudeHzReal_swigregister
DrudeHzReal_swigregister(DrudeHzReal)

class LorentzElectricParamReal(ElectricParamReal):
    __swig_setmethods__ = {}
    for _s in [ElectricParamReal]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LorentzElectricParamReal, name, value)
    __swig_getmethods__ = {}
    for _s in [ElectricParamReal]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LorentzElectricParamReal, name)
    __repr__ = _swig_repr
    __swig_setmethods__["a"] = _pw_material.LorentzElectricParamReal_a_set
    __swig_getmethods__["a"] = _pw_material.LorentzElectricParamReal_a_get
    if _newclass:
        a = _swig_property(_pw_material.LorentzElectricParamReal_a_get, _pw_material.LorentzElectricParamReal_a_set)
    __swig_setmethods__["c"] = _pw_material.LorentzElectricParamReal_c_set
    __swig_getmethods__["c"] = _pw_material.LorentzElectricParamReal_c_get
    if _newclass:
        c = _swig_property(_pw_material.LorentzElectricParamReal_c_get, _pw_material.LorentzElectricParamReal_c_set)
    __swig_setmethods__["l_now"] = _pw_material.LorentzElectricParamReal_l_now_set
    __swig_getmethods__["l_now"] = _pw_material.LorentzElectricParamReal_l_now_get
    if _newclass:
        l_now = _swig_property(_pw_material.LorentzElectricParamReal_l_now_get, _pw_material.LorentzElectricParamReal_l_now_set)
    __swig_setmethods__["l_new"] = _pw_material.LorentzElectricParamReal_l_new_set
    __swig_getmethods__["l_new"] = _pw_material.LorentzElectricParamReal_l_new_get
    if _newclass:
        l_new = _swig_property(_pw_material.LorentzElectricParamReal_l_new_get, _pw_material.LorentzElectricParamReal_l_new_set)

    def set(self, a, c):
        return _pw_material.LorentzElectricParamReal_set(self, a, c)

    def __init__(self):
        this = _pw_material.new_LorentzElectricParamReal()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_LorentzElectricParamReal
    __del__ = lambda self: None
LorentzElectricParamReal_swigregister = _pw_material.LorentzElectricParamReal_swigregister
LorentzElectricParamReal_swigregister(LorentzElectricParamReal)

class LorentzMagneticParamReal(MagneticParamReal):
    __swig_setmethods__ = {}
    for _s in [MagneticParamReal]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LorentzMagneticParamReal, name, value)
    __swig_getmethods__ = {}
    for _s in [MagneticParamReal]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LorentzMagneticParamReal, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pw_material.new_LorentzMagneticParamReal()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_LorentzMagneticParamReal
    __del__ = lambda self: None
LorentzMagneticParamReal_swigregister = _pw_material.LorentzMagneticParamReal_swigregister
LorentzMagneticParamReal_swigregister(LorentzMagneticParamReal)

class LorentzElectricReal(MaterialElectricReal):
    __swig_setmethods__ = {}
    for _s in [MaterialElectricReal]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LorentzElectricReal, name, value)
    __swig_getmethods__ = {}
    for _s in [MaterialElectricReal]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LorentzElectricReal, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def name(self):
        return _pw_material.LorentzElectricReal_name(self)

    def get_eps_inf(self, idx):
        return _pw_material.LorentzElectricReal_get_eps_inf(self, idx)

    def attach(self, idx, pm_param_ptr):
        return _pw_material.LorentzElectricReal_attach(self, idx, pm_param_ptr)

    def merge(self, pm_ptr):
        return _pw_material.LorentzElectricReal_merge(self, pm_ptr)

    def lps_sum(self, init, lorentz_param):
        return _pw_material.LorentzElectricReal_lps_sum(self, init, lorentz_param)

    def update_l(self, e_now, lorentz_param):
        return _pw_material.LorentzElectricReal_update_l(self, e_now, lorentz_param)
    __swig_destroy__ = _pw_material.delete_LorentzElectricReal
    __del__ = lambda self: None
LorentzElectricReal_swigregister = _pw_material.LorentzElectricReal_swigregister
LorentzElectricReal_swigregister(LorentzElectricReal)

class LorentzExReal(LorentzElectricReal):
    __swig_setmethods__ = {}
    for _s in [LorentzElectricReal]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LorentzExReal, name, value)
    __swig_getmethods__ = {}
    for _s in [LorentzElectricReal]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LorentzExReal, name)
    __repr__ = _swig_repr

    def update_all(self, ex, hz, hy, dy, dz, dt, n):
        return _pw_material.LorentzExReal_update_all(self, ex, hz, hy, dy, dz, dt, n)

    def __init__(self):
        this = _pw_material.new_LorentzExReal()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_LorentzExReal
    __del__ = lambda self: None
LorentzExReal_swigregister = _pw_material.LorentzExReal_swigregister
LorentzExReal_swigregister(LorentzExReal)

class LorentzEyReal(LorentzElectricReal):
    __swig_setmethods__ = {}
    for _s in [LorentzElectricReal]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LorentzEyReal, name, value)
    __swig_getmethods__ = {}
    for _s in [LorentzElectricReal]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LorentzEyReal, name)
    __repr__ = _swig_repr

    def update_all(self, ey, hx, hz, dz, dx, dt, n):
        return _pw_material.LorentzEyReal_update_all(self, ey, hx, hz, dz, dx, dt, n)

    def __init__(self):
        this = _pw_material.new_LorentzEyReal()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_LorentzEyReal
    __del__ = lambda self: None
LorentzEyReal_swigregister = _pw_material.LorentzEyReal_swigregister
LorentzEyReal_swigregister(LorentzEyReal)

class LorentzEzReal(LorentzElectricReal):
    __swig_setmethods__ = {}
    for _s in [LorentzElectricReal]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LorentzEzReal, name, value)
    __swig_getmethods__ = {}
    for _s in [LorentzElectricReal]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LorentzEzReal, name)
    __repr__ = _swig_repr

    def update_all(self, ez, hy, hx, dx, dy, dt, n):
        return _pw_material.LorentzEzReal_update_all(self, ez, hy, hx, dx, dy, dt, n)

    def __init__(self):
        this = _pw_material.new_LorentzEzReal()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_LorentzEzReal
    __del__ = lambda self: None
LorentzEzReal_swigregister = _pw_material.LorentzEzReal_swigregister
LorentzEzReal_swigregister(LorentzEzReal)

class LorentzHxReal(DielectricHxReal):
    __swig_setmethods__ = {}
    for _s in [DielectricHxReal]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LorentzHxReal, name, value)
    __swig_getmethods__ = {}
    for _s in [DielectricHxReal]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LorentzHxReal, name)
    __repr__ = _swig_repr

    def name(self):
        return _pw_material.LorentzHxReal_name(self)

    def __init__(self):
        this = _pw_material.new_LorentzHxReal()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_LorentzHxReal
    __del__ = lambda self: None
LorentzHxReal_swigregister = _pw_material.LorentzHxReal_swigregister
LorentzHxReal_swigregister(LorentzHxReal)

class LorentzHyReal(DielectricHyReal):
    __swig_setmethods__ = {}
    for _s in [DielectricHyReal]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LorentzHyReal, name, value)
    __swig_getmethods__ = {}
    for _s in [DielectricHyReal]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LorentzHyReal, name)
    __repr__ = _swig_repr

    def name(self):
        return _pw_material.LorentzHyReal_name(self)

    def __init__(self):
        this = _pw_material.new_LorentzHyReal()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_LorentzHyReal
    __del__ = lambda self: None
LorentzHyReal_swigregister = _pw_material.LorentzHyReal_swigregister
LorentzHyReal_swigregister(LorentzHyReal)

class LorentzHzReal(DielectricHzReal):
    __swig_setmethods__ = {}
    for _s in [DielectricHzReal]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LorentzHzReal, name, value)
    __swig_getmethods__ = {}
    for _s in [DielectricHzReal]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LorentzHzReal, name)
    __repr__ = _swig_repr

    def name(self):
        return _pw_material.LorentzHzReal_name(self)

    def __init__(self):
        this = _pw_material.new_LorentzHzReal()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_LorentzHzReal
    __del__ = lambda self: None
LorentzHzReal_swigregister = _pw_material.LorentzHzReal_swigregister
LorentzHzReal_swigregister(LorentzHzReal)

class DcpAdeElectricParamReal(ElectricParamReal):
    __swig_setmethods__ = {}
    for _s in [ElectricParamReal]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DcpAdeElectricParamReal, name, value)
    __swig_getmethods__ = {}
    for _s in [ElectricParamReal]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DcpAdeElectricParamReal, name)
    __repr__ = _swig_repr
    __swig_setmethods__["a"] = _pw_material.DcpAdeElectricParamReal_a_set
    __swig_getmethods__["a"] = _pw_material.DcpAdeElectricParamReal_a_get
    if _newclass:
        a = _swig_property(_pw_material.DcpAdeElectricParamReal_a_get, _pw_material.DcpAdeElectricParamReal_a_set)
    __swig_setmethods__["b"] = _pw_material.DcpAdeElectricParamReal_b_set
    __swig_getmethods__["b"] = _pw_material.DcpAdeElectricParamReal_b_get
    if _newclass:
        b = _swig_property(_pw_material.DcpAdeElectricParamReal_b_get, _pw_material.DcpAdeElectricParamReal_b_set)
    __swig_setmethods__["c"] = _pw_material.DcpAdeElectricParamReal_c_set
    __swig_getmethods__["c"] = _pw_material.DcpAdeElectricParamReal_c_get
    if _newclass:
        c = _swig_property(_pw_material.DcpAdeElectricParamReal_c_get, _pw_material.DcpAdeElectricParamReal_c_set)
    __swig_setmethods__["e_old"] = _pw_material.DcpAdeElectricParamReal_e_old_set
    __swig_getmethods__["e_old"] = _pw_material.DcpAdeElectricParamReal_e_old_get
    if _newclass:
        e_old = _swig_property(_pw_material.DcpAdeElectricParamReal_e_old_get, _pw_material.DcpAdeElectricParamReal_e_old_set)
    __swig_setmethods__["q_old"] = _pw_material.DcpAdeElectricParamReal_q_old_set
    __swig_getmethods__["q_old"] = _pw_material.DcpAdeElectricParamReal_q_old_get
    if _newclass:
        q_old = _swig_property(_pw_material.DcpAdeElectricParamReal_q_old_get, _pw_material.DcpAdeElectricParamReal_q_old_set)
    __swig_setmethods__["q_now"] = _pw_material.DcpAdeElectricParamReal_q_now_set
    __swig_getmethods__["q_now"] = _pw_material.DcpAdeElectricParamReal_q_now_get
    if _newclass:
        q_now = _swig_property(_pw_material.DcpAdeElectricParamReal_q_now_get, _pw_material.DcpAdeElectricParamReal_q_now_set)
    __swig_setmethods__["p_old"] = _pw_material.DcpAdeElectricParamReal_p_old_set
    __swig_getmethods__["p_old"] = _pw_material.DcpAdeElectricParamReal_p_old_get
    if _newclass:
        p_old = _swig_property(_pw_material.DcpAdeElectricParamReal_p_old_get, _pw_material.DcpAdeElectricParamReal_p_old_set)
    __swig_setmethods__["p_now"] = _pw_material.DcpAdeElectricParamReal_p_now_set
    __swig_getmethods__["p_now"] = _pw_material.DcpAdeElectricParamReal_p_now_get
    if _newclass:
        p_now = _swig_property(_pw_material.DcpAdeElectricParamReal_p_now_get, _pw_material.DcpAdeElectricParamReal_p_now_set)

    def set(self, a, b, c):
        return _pw_material.DcpAdeElectricParamReal_set(self, a, b, c)

    def __init__(self):
        this = _pw_material.new_DcpAdeElectricParamReal()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_DcpAdeElectricParamReal
    __del__ = lambda self: None
DcpAdeElectricParamReal_swigregister = _pw_material.DcpAdeElectricParamReal_swigregister
DcpAdeElectricParamReal_swigregister(DcpAdeElectricParamReal)

class DcpAdeMagneticParamReal(MagneticParamReal):
    __swig_setmethods__ = {}
    for _s in [MagneticParamReal]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DcpAdeMagneticParamReal, name, value)
    __swig_getmethods__ = {}
    for _s in [MagneticParamReal]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DcpAdeMagneticParamReal, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pw_material.new_DcpAdeMagneticParamReal()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_DcpAdeMagneticParamReal
    __del__ = lambda self: None
DcpAdeMagneticParamReal_swigregister = _pw_material.DcpAdeMagneticParamReal_swigregister
DcpAdeMagneticParamReal_swigregister(DcpAdeMagneticParamReal)

class DcpAdeElectricReal(MaterialElectricReal):
    __swig_setmethods__ = {}
    for _s in [MaterialElectricReal]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DcpAdeElectricReal, name, value)
    __swig_getmethods__ = {}
    for _s in [MaterialElectricReal]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DcpAdeElectricReal, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def name(self):
        return _pw_material.DcpAdeElectricReal_name(self)

    def get_eps_inf(self, idx):
        return _pw_material.DcpAdeElectricReal_get_eps_inf(self, idx)

    def attach(self, idx, pm_param_ptr):
        return _pw_material.DcpAdeElectricReal_attach(self, idx, pm_param_ptr)

    def merge(self, pm_ptr):
        return _pw_material.DcpAdeElectricReal_merge(self, pm_ptr)

    def dps_sum(self, init, dcp_param):
        return _pw_material.DcpAdeElectricReal_dps_sum(self, init, dcp_param)

    def cps_sum(self, init, dcp_param):
        return _pw_material.DcpAdeElectricReal_cps_sum(self, init, dcp_param)

    def update_q(self, e_old, e_now, e_new, dcp_param):
        return _pw_material.DcpAdeElectricReal_update_q(self, e_old, e_now, e_new, dcp_param)

    def update_p(self, e_old, e_now, e_new, dcp_param):
        return _pw_material.DcpAdeElectricReal_update_p(self, e_old, e_now, e_new, dcp_param)
    __swig_destroy__ = _pw_material.delete_DcpAdeElectricReal
    __del__ = lambda self: None
DcpAdeElectricReal_swigregister = _pw_material.DcpAdeElectricReal_swigregister
DcpAdeElectricReal_swigregister(DcpAdeElectricReal)

class DcpAdeExReal(DcpAdeElectricReal):
    __swig_setmethods__ = {}
    for _s in [DcpAdeElectricReal]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DcpAdeExReal, name, value)
    __swig_getmethods__ = {}
    for _s in [DcpAdeElectricReal]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DcpAdeExReal, name)
    __repr__ = _swig_repr

    def update_all(self, ex, hz, hy, dy, dz, dt, n):
        return _pw_material.DcpAdeExReal_update_all(self, ex, hz, hy, dy, dz, dt, n)

    def __init__(self):
        this = _pw_material.new_DcpAdeExReal()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_DcpAdeExReal
    __del__ = lambda self: None
DcpAdeExReal_swigregister = _pw_material.DcpAdeExReal_swigregister
DcpAdeExReal_swigregister(DcpAdeExReal)

class DcpAdeEyReal(DcpAdeElectricReal):
    __swig_setmethods__ = {}
    for _s in [DcpAdeElectricReal]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DcpAdeEyReal, name, value)
    __swig_getmethods__ = {}
    for _s in [DcpAdeElectricReal]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DcpAdeEyReal, name)
    __repr__ = _swig_repr

    def update_all(self, ey, hx, hz, dz, dx, dt, n):
        return _pw_material.DcpAdeEyReal_update_all(self, ey, hx, hz, dz, dx, dt, n)

    def __init__(self):
        this = _pw_material.new_DcpAdeEyReal()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_DcpAdeEyReal
    __del__ = lambda self: None
DcpAdeEyReal_swigregister = _pw_material.DcpAdeEyReal_swigregister
DcpAdeEyReal_swigregister(DcpAdeEyReal)

class DcpAdeEzReal(DcpAdeElectricReal):
    __swig_setmethods__ = {}
    for _s in [DcpAdeElectricReal]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DcpAdeEzReal, name, value)
    __swig_getmethods__ = {}
    for _s in [DcpAdeElectricReal]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DcpAdeEzReal, name)
    __repr__ = _swig_repr

    def update_all(self, ez, hy, hx, dx, dy, dt, n):
        return _pw_material.DcpAdeEzReal_update_all(self, ez, hy, hx, dx, dy, dt, n)

    def __init__(self):
        this = _pw_material.new_DcpAdeEzReal()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_DcpAdeEzReal
    __del__ = lambda self: None
DcpAdeEzReal_swigregister = _pw_material.DcpAdeEzReal_swigregister
DcpAdeEzReal_swigregister(DcpAdeEzReal)

class DcpAdeHxReal(DielectricHxReal):
    __swig_setmethods__ = {}
    for _s in [DielectricHxReal]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DcpAdeHxReal, name, value)
    __swig_getmethods__ = {}
    for _s in [DielectricHxReal]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DcpAdeHxReal, name)
    __repr__ = _swig_repr

    def name(self):
        return _pw_material.DcpAdeHxReal_name(self)

    def __init__(self):
        this = _pw_material.new_DcpAdeHxReal()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_DcpAdeHxReal
    __del__ = lambda self: None
DcpAdeHxReal_swigregister = _pw_material.DcpAdeHxReal_swigregister
DcpAdeHxReal_swigregister(DcpAdeHxReal)

class DcpAdeHyReal(DielectricHyReal):
    __swig_setmethods__ = {}
    for _s in [DielectricHyReal]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DcpAdeHyReal, name, value)
    __swig_getmethods__ = {}
    for _s in [DielectricHyReal]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DcpAdeHyReal, name)
    __repr__ = _swig_repr

    def name(self):
        return _pw_material.DcpAdeHyReal_name(self)

    def __init__(self):
        this = _pw_material.new_DcpAdeHyReal()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_DcpAdeHyReal
    __del__ = lambda self: None
DcpAdeHyReal_swigregister = _pw_material.DcpAdeHyReal_swigregister
DcpAdeHyReal_swigregister(DcpAdeHyReal)

class DcpAdeHzReal(DielectricHzReal):
    __swig_setmethods__ = {}
    for _s in [DielectricHzReal]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DcpAdeHzReal, name, value)
    __swig_getmethods__ = {}
    for _s in [DielectricHzReal]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DcpAdeHzReal, name)
    __repr__ = _swig_repr

    def name(self):
        return _pw_material.DcpAdeHzReal_name(self)

    def __init__(self):
        this = _pw_material.new_DcpAdeHzReal()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_DcpAdeHzReal
    __del__ = lambda self: None
DcpAdeHzReal_swigregister = _pw_material.DcpAdeHzReal_swigregister
DcpAdeHzReal_swigregister(DcpAdeHzReal)

class DcpPlrcElectricParamReal(ElectricParamReal):
    __swig_setmethods__ = {}
    for _s in [ElectricParamReal]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DcpPlrcElectricParamReal, name, value)
    __swig_getmethods__ = {}
    for _s in [ElectricParamReal]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DcpPlrcElectricParamReal, name)
    __repr__ = _swig_repr
    __swig_setmethods__["a"] = _pw_material.DcpPlrcElectricParamReal_a_set
    __swig_getmethods__["a"] = _pw_material.DcpPlrcElectricParamReal_a_get
    if _newclass:
        a = _swig_property(_pw_material.DcpPlrcElectricParamReal_a_get, _pw_material.DcpPlrcElectricParamReal_a_set)
    __swig_setmethods__["b"] = _pw_material.DcpPlrcElectricParamReal_b_set
    __swig_getmethods__["b"] = _pw_material.DcpPlrcElectricParamReal_b_get
    if _newclass:
        b = _swig_property(_pw_material.DcpPlrcElectricParamReal_b_get, _pw_material.DcpPlrcElectricParamReal_b_set)
    __swig_setmethods__["c"] = _pw_material.DcpPlrcElectricParamReal_c_set
    __swig_getmethods__["c"] = _pw_material.DcpPlrcElectricParamReal_c_get
    if _newclass:
        c = _swig_property(_pw_material.DcpPlrcElectricParamReal_c_get, _pw_material.DcpPlrcElectricParamReal_c_set)
    __swig_setmethods__["psi_dp_re"] = _pw_material.DcpPlrcElectricParamReal_psi_dp_re_set
    __swig_getmethods__["psi_dp_re"] = _pw_material.DcpPlrcElectricParamReal_psi_dp_re_get
    if _newclass:
        psi_dp_re = _swig_property(_pw_material.DcpPlrcElectricParamReal_psi_dp_re_get, _pw_material.DcpPlrcElectricParamReal_psi_dp_re_set)
    __swig_setmethods__["psi_dp_im"] = _pw_material.DcpPlrcElectricParamReal_psi_dp_im_set
    __swig_getmethods__["psi_dp_im"] = _pw_material.DcpPlrcElectricParamReal_psi_dp_im_get
    if _newclass:
        psi_dp_im = _swig_property(_pw_material.DcpPlrcElectricParamReal_psi_dp_im_get, _pw_material.DcpPlrcElectricParamReal_psi_dp_im_set)
    __swig_setmethods__["psi_cp_re"] = _pw_material.DcpPlrcElectricParamReal_psi_cp_re_set
    __swig_getmethods__["psi_cp_re"] = _pw_material.DcpPlrcElectricParamReal_psi_cp_re_get
    if _newclass:
        psi_cp_re = _swig_property(_pw_material.DcpPlrcElectricParamReal_psi_cp_re_get, _pw_material.DcpPlrcElectricParamReal_psi_cp_re_set)
    __swig_setmethods__["psi_cp_im"] = _pw_material.DcpPlrcElectricParamReal_psi_cp_im_set
    __swig_getmethods__["psi_cp_im"] = _pw_material.DcpPlrcElectricParamReal_psi_cp_im_get
    if _newclass:
        psi_cp_im = _swig_property(_pw_material.DcpPlrcElectricParamReal_psi_cp_im_get, _pw_material.DcpPlrcElectricParamReal_psi_cp_im_set)

    def set(self, a, b, c):
        return _pw_material.DcpPlrcElectricParamReal_set(self, a, b, c)

    def __init__(self):
        this = _pw_material.new_DcpPlrcElectricParamReal()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_DcpPlrcElectricParamReal
    __del__ = lambda self: None
DcpPlrcElectricParamReal_swigregister = _pw_material.DcpPlrcElectricParamReal_swigregister
DcpPlrcElectricParamReal_swigregister(DcpPlrcElectricParamReal)

class DcpPlrcMagneticParamReal(MagneticParamReal):
    __swig_setmethods__ = {}
    for _s in [MagneticParamReal]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DcpPlrcMagneticParamReal, name, value)
    __swig_getmethods__ = {}
    for _s in [MagneticParamReal]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DcpPlrcMagneticParamReal, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pw_material.new_DcpPlrcMagneticParamReal()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_DcpPlrcMagneticParamReal
    __del__ = lambda self: None
DcpPlrcMagneticParamReal_swigregister = _pw_material.DcpPlrcMagneticParamReal_swigregister
DcpPlrcMagneticParamReal_swigregister(DcpPlrcMagneticParamReal)

class DcpPlrcElectricReal(MaterialElectricReal):
    __swig_setmethods__ = {}
    for _s in [MaterialElectricReal]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DcpPlrcElectricReal, name, value)
    __swig_getmethods__ = {}
    for _s in [MaterialElectricReal]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DcpPlrcElectricReal, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def name(self):
        return _pw_material.DcpPlrcElectricReal_name(self)

    def get_eps_inf(self, idx):
        return _pw_material.DcpPlrcElectricReal_get_eps_inf(self, idx)

    def attach(self, idx, pm_param_ptr):
        return _pw_material.DcpPlrcElectricReal_attach(self, idx, pm_param_ptr)

    def merge(self, pm_ptr):
        return _pw_material.DcpPlrcElectricReal_merge(self, pm_ptr)

    def update_psi_dp(self, e_now, e_new, dcp_param):
        return _pw_material.DcpPlrcElectricReal_update_psi_dp(self, e_now, e_new, dcp_param)

    def update_psi_cp(self, e_now, e_new, dcp_param):
        return _pw_material.DcpPlrcElectricReal_update_psi_cp(self, e_now, e_new, dcp_param)

    def psi_total(self, dcp_param):
        return _pw_material.DcpPlrcElectricReal_psi_total(self, dcp_param)
    __swig_destroy__ = _pw_material.delete_DcpPlrcElectricReal
    __del__ = lambda self: None
DcpPlrcElectricReal_swigregister = _pw_material.DcpPlrcElectricReal_swigregister
DcpPlrcElectricReal_swigregister(DcpPlrcElectricReal)

class DcpPlrcExReal(DcpPlrcElectricReal):
    __swig_setmethods__ = {}
    for _s in [DcpPlrcElectricReal]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DcpPlrcExReal, name, value)
    __swig_getmethods__ = {}
    for _s in [DcpPlrcElectricReal]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DcpPlrcExReal, name)
    __repr__ = _swig_repr

    def update_all(self, ex, hz, hy, dy, dz, dt, n):
        return _pw_material.DcpPlrcExReal_update_all(self, ex, hz, hy, dy, dz, dt, n)

    def __init__(self):
        this = _pw_material.new_DcpPlrcExReal()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_DcpPlrcExReal
    __del__ = lambda self: None
DcpPlrcExReal_swigregister = _pw_material.DcpPlrcExReal_swigregister
DcpPlrcExReal_swigregister(DcpPlrcExReal)

class DcpPlrcEyReal(DcpPlrcElectricReal):
    __swig_setmethods__ = {}
    for _s in [DcpPlrcElectricReal]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DcpPlrcEyReal, name, value)
    __swig_getmethods__ = {}
    for _s in [DcpPlrcElectricReal]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DcpPlrcEyReal, name)
    __repr__ = _swig_repr

    def update_all(self, ey, hx, hz, dz, dx, dt, n):
        return _pw_material.DcpPlrcEyReal_update_all(self, ey, hx, hz, dz, dx, dt, n)

    def __init__(self):
        this = _pw_material.new_DcpPlrcEyReal()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_DcpPlrcEyReal
    __del__ = lambda self: None
DcpPlrcEyReal_swigregister = _pw_material.DcpPlrcEyReal_swigregister
DcpPlrcEyReal_swigregister(DcpPlrcEyReal)

class DcpPlrcEzReal(DcpPlrcElectricReal):
    __swig_setmethods__ = {}
    for _s in [DcpPlrcElectricReal]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DcpPlrcEzReal, name, value)
    __swig_getmethods__ = {}
    for _s in [DcpPlrcElectricReal]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DcpPlrcEzReal, name)
    __repr__ = _swig_repr

    def update_all(self, ez, hy, hx, dx, dy, dt, n):
        return _pw_material.DcpPlrcEzReal_update_all(self, ez, hy, hx, dx, dy, dt, n)

    def __init__(self):
        this = _pw_material.new_DcpPlrcEzReal()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_DcpPlrcEzReal
    __del__ = lambda self: None
DcpPlrcEzReal_swigregister = _pw_material.DcpPlrcEzReal_swigregister
DcpPlrcEzReal_swigregister(DcpPlrcEzReal)

class DcpPlrcHxReal(DielectricHxReal):
    __swig_setmethods__ = {}
    for _s in [DielectricHxReal]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DcpPlrcHxReal, name, value)
    __swig_getmethods__ = {}
    for _s in [DielectricHxReal]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DcpPlrcHxReal, name)
    __repr__ = _swig_repr

    def name(self):
        return _pw_material.DcpPlrcHxReal_name(self)

    def __init__(self):
        this = _pw_material.new_DcpPlrcHxReal()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_DcpPlrcHxReal
    __del__ = lambda self: None
DcpPlrcHxReal_swigregister = _pw_material.DcpPlrcHxReal_swigregister
DcpPlrcHxReal_swigregister(DcpPlrcHxReal)

class DcpPlrcHyReal(DielectricHyReal):
    __swig_setmethods__ = {}
    for _s in [DielectricHyReal]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DcpPlrcHyReal, name, value)
    __swig_getmethods__ = {}
    for _s in [DielectricHyReal]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DcpPlrcHyReal, name)
    __repr__ = _swig_repr

    def name(self):
        return _pw_material.DcpPlrcHyReal_name(self)

    def __init__(self):
        this = _pw_material.new_DcpPlrcHyReal()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_DcpPlrcHyReal
    __del__ = lambda self: None
DcpPlrcHyReal_swigregister = _pw_material.DcpPlrcHyReal_swigregister
DcpPlrcHyReal_swigregister(DcpPlrcHyReal)

class DcpPlrcHzReal(DielectricHzReal):
    __swig_setmethods__ = {}
    for _s in [DielectricHzReal]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DcpPlrcHzReal, name, value)
    __swig_getmethods__ = {}
    for _s in [DielectricHzReal]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DcpPlrcHzReal, name)
    __repr__ = _swig_repr

    def name(self):
        return _pw_material.DcpPlrcHzReal_name(self)

    def __init__(self):
        this = _pw_material.new_DcpPlrcHzReal()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_DcpPlrcHzReal
    __del__ = lambda self: None
DcpPlrcHzReal_swigregister = _pw_material.DcpPlrcHzReal_swigregister
DcpPlrcHzReal_swigregister(DcpPlrcHzReal)

class ElectricParamCmplx(PwMaterialParam):
    __swig_setmethods__ = {}
    for _s in [PwMaterialParam]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ElectricParamCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [PwMaterialParam]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ElectricParamCmplx, name)
    __repr__ = _swig_repr
    __swig_setmethods__["eps_inf"] = _pw_material.ElectricParamCmplx_eps_inf_set
    __swig_getmethods__["eps_inf"] = _pw_material.ElectricParamCmplx_eps_inf_get
    if _newclass:
        eps_inf = _swig_property(_pw_material.ElectricParamCmplx_eps_inf_get, _pw_material.ElectricParamCmplx_eps_inf_set)

    def __init__(self):
        this = _pw_material.new_ElectricParamCmplx()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_ElectricParamCmplx
    __del__ = lambda self: None
ElectricParamCmplx_swigregister = _pw_material.ElectricParamCmplx_swigregister
ElectricParamCmplx_swigregister(ElectricParamCmplx)

class MagneticParamCmplx(PwMaterialParam):
    __swig_setmethods__ = {}
    for _s in [PwMaterialParam]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MagneticParamCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [PwMaterialParam]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MagneticParamCmplx, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mu_inf"] = _pw_material.MagneticParamCmplx_mu_inf_set
    __swig_getmethods__["mu_inf"] = _pw_material.MagneticParamCmplx_mu_inf_get
    if _newclass:
        mu_inf = _swig_property(_pw_material.MagneticParamCmplx_mu_inf_get, _pw_material.MagneticParamCmplx_mu_inf_set)

    def __init__(self):
        this = _pw_material.new_MagneticParamCmplx()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_MagneticParamCmplx
    __del__ = lambda self: None
MagneticParamCmplx_swigregister = _pw_material.MagneticParamCmplx_swigregister
MagneticParamCmplx_swigregister(MagneticParamCmplx)

class PwMaterialCmplx(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PwMaterialCmplx, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PwMaterialCmplx, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pw_material.delete_PwMaterialCmplx
    __del__ = lambda self: None

    def name(self):
        return _pw_material.PwMaterialCmplx_name(self)

    def attach(self, idx, parameter):
        return _pw_material.PwMaterialCmplx_attach(self, idx, parameter)

    def update_all(self, inplace_field, in_field1, in_field2, d1, d2, dt, n):
        return _pw_material.PwMaterialCmplx_update_all(self, inplace_field, in_field1, in_field2, d1, d2, dt, n)

    def find(self, idx):
        return _pw_material.PwMaterialCmplx_find(self, idx)

    def merge(self, pm):
        return _pw_material.PwMaterialCmplx_merge(self, pm)

    def idx_size(self):
        return _pw_material.PwMaterialCmplx_idx_size(self)
PwMaterialCmplx_swigregister = _pw_material.PwMaterialCmplx_swigregister
PwMaterialCmplx_swigregister(PwMaterialCmplx)

class MaterialElectricCmplx(PwMaterialCmplx):
    __swig_setmethods__ = {}
    for _s in [PwMaterialCmplx]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MaterialElectricCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [PwMaterialCmplx]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MaterialElectricCmplx, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def get_eps_inf(self, idx):
        return _pw_material.MaterialElectricCmplx_get_eps_inf(self, idx)

    def find(self, idx):
        return _pw_material.MaterialElectricCmplx_find(self, idx)
    __swig_destroy__ = _pw_material.delete_MaterialElectricCmplx
    __del__ = lambda self: None
MaterialElectricCmplx_swigregister = _pw_material.MaterialElectricCmplx_swigregister
MaterialElectricCmplx_swigregister(MaterialElectricCmplx)

class MaterialMagneticCmplx(PwMaterialCmplx):
    __swig_setmethods__ = {}
    for _s in [PwMaterialCmplx]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MaterialMagneticCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [PwMaterialCmplx]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MaterialMagneticCmplx, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def get_mu_inf(self, idx):
        return _pw_material.MaterialMagneticCmplx_get_mu_inf(self, idx)

    def find(self, idx):
        return _pw_material.MaterialMagneticCmplx_find(self, idx)
    __swig_destroy__ = _pw_material.delete_MaterialMagneticCmplx
    __del__ = lambda self: None
MaterialMagneticCmplx_swigregister = _pw_material.MaterialMagneticCmplx_swigregister
MaterialMagneticCmplx_swigregister(MaterialMagneticCmplx)

class DummyElectricParamCmplx(ElectricParamCmplx):
    __swig_setmethods__ = {}
    for _s in [ElectricParamCmplx]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DummyElectricParamCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [ElectricParamCmplx]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DummyElectricParamCmplx, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pw_material.new_DummyElectricParamCmplx()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_DummyElectricParamCmplx
    __del__ = lambda self: None
DummyElectricParamCmplx_swigregister = _pw_material.DummyElectricParamCmplx_swigregister
DummyElectricParamCmplx_swigregister(DummyElectricParamCmplx)

class DummyMagneticParamCmplx(MagneticParamCmplx):
    __swig_setmethods__ = {}
    for _s in [MagneticParamCmplx]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DummyMagneticParamCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [MagneticParamCmplx]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DummyMagneticParamCmplx, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pw_material.new_DummyMagneticParamCmplx()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_DummyMagneticParamCmplx
    __del__ = lambda self: None
DummyMagneticParamCmplx_swigregister = _pw_material.DummyMagneticParamCmplx_swigregister
DummyMagneticParamCmplx_swigregister(DummyMagneticParamCmplx)

class DummyElectricCmplx(MaterialElectricCmplx):
    __swig_setmethods__ = {}
    for _s in [MaterialElectricCmplx]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DummyElectricCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [MaterialElectricCmplx]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DummyElectricCmplx, name)
    __repr__ = _swig_repr

    def name(self):
        return _pw_material.DummyElectricCmplx_name(self)

    def get_eps_inf(self, idx):
        return _pw_material.DummyElectricCmplx_get_eps_inf(self, idx)

    def attach(self, idx, pm_param_ptr):
        return _pw_material.DummyElectricCmplx_attach(self, idx, pm_param_ptr)

    def merge(self, pm_ptr):
        return _pw_material.DummyElectricCmplx_merge(self, pm_ptr)

    def update_all(self, inplace_field, in_field1, in_field2, d1, d2, dt, n):
        return _pw_material.DummyElectricCmplx_update_all(self, inplace_field, in_field1, in_field2, d1, d2, dt, n)

    def __init__(self):
        this = _pw_material.new_DummyElectricCmplx()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_DummyElectricCmplx
    __del__ = lambda self: None
DummyElectricCmplx_swigregister = _pw_material.DummyElectricCmplx_swigregister
DummyElectricCmplx_swigregister(DummyElectricCmplx)

class DummyMagneticCmplx(MaterialMagneticCmplx):
    __swig_setmethods__ = {}
    for _s in [MaterialMagneticCmplx]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DummyMagneticCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [MaterialMagneticCmplx]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DummyMagneticCmplx, name)
    __repr__ = _swig_repr

    def name(self):
        return _pw_material.DummyMagneticCmplx_name(self)

    def get_mu_inf(self, idx):
        return _pw_material.DummyMagneticCmplx_get_mu_inf(self, idx)

    def attach(self, idx, pm_param_ptr):
        return _pw_material.DummyMagneticCmplx_attach(self, idx, pm_param_ptr)

    def merge(self, pm_ptr):
        return _pw_material.DummyMagneticCmplx_merge(self, pm_ptr)

    def update_all(self, inplace_field, in_field1, in_field2, d1, d2, dt, n):
        return _pw_material.DummyMagneticCmplx_update_all(self, inplace_field, in_field1, in_field2, d1, d2, dt, n)

    def __init__(self):
        this = _pw_material.new_DummyMagneticCmplx()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_DummyMagneticCmplx
    __del__ = lambda self: None
DummyMagneticCmplx_swigregister = _pw_material.DummyMagneticCmplx_swigregister
DummyMagneticCmplx_swigregister(DummyMagneticCmplx)

class DummyExCmplx(DummyElectricCmplx):
    __swig_setmethods__ = {}
    for _s in [DummyElectricCmplx]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DummyExCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [DummyElectricCmplx]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DummyExCmplx, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pw_material.new_DummyExCmplx()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_DummyExCmplx
    __del__ = lambda self: None
DummyExCmplx_swigregister = _pw_material.DummyExCmplx_swigregister
DummyExCmplx_swigregister(DummyExCmplx)

class DummyEyCmplx(DummyElectricCmplx):
    __swig_setmethods__ = {}
    for _s in [DummyElectricCmplx]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DummyEyCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [DummyElectricCmplx]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DummyEyCmplx, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pw_material.new_DummyEyCmplx()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_DummyEyCmplx
    __del__ = lambda self: None
DummyEyCmplx_swigregister = _pw_material.DummyEyCmplx_swigregister
DummyEyCmplx_swigregister(DummyEyCmplx)

class DummyEzCmplx(DummyElectricCmplx):
    __swig_setmethods__ = {}
    for _s in [DummyElectricCmplx]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DummyEzCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [DummyElectricCmplx]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DummyEzCmplx, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pw_material.new_DummyEzCmplx()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_DummyEzCmplx
    __del__ = lambda self: None
DummyEzCmplx_swigregister = _pw_material.DummyEzCmplx_swigregister
DummyEzCmplx_swigregister(DummyEzCmplx)

class DummyHxCmplx(DummyMagneticCmplx):
    __swig_setmethods__ = {}
    for _s in [DummyMagneticCmplx]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DummyHxCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [DummyMagneticCmplx]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DummyHxCmplx, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pw_material.new_DummyHxCmplx()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_DummyHxCmplx
    __del__ = lambda self: None
DummyHxCmplx_swigregister = _pw_material.DummyHxCmplx_swigregister
DummyHxCmplx_swigregister(DummyHxCmplx)

class DummyHyCmplx(DummyMagneticCmplx):
    __swig_setmethods__ = {}
    for _s in [DummyMagneticCmplx]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DummyHyCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [DummyMagneticCmplx]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DummyHyCmplx, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pw_material.new_DummyHyCmplx()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_DummyHyCmplx
    __del__ = lambda self: None
DummyHyCmplx_swigregister = _pw_material.DummyHyCmplx_swigregister
DummyHyCmplx_swigregister(DummyHyCmplx)

class DummyHzCmplx(DummyMagneticCmplx):
    __swig_setmethods__ = {}
    for _s in [DummyMagneticCmplx]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DummyHzCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [DummyMagneticCmplx]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DummyHzCmplx, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pw_material.new_DummyHzCmplx()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_DummyHzCmplx
    __del__ = lambda self: None
DummyHzCmplx_swigregister = _pw_material.DummyHzCmplx_swigregister
DummyHzCmplx_swigregister(DummyHzCmplx)

class ConstElectricParamCmplx(ElectricParamCmplx):
    __swig_setmethods__ = {}
    for _s in [ElectricParamCmplx]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstElectricParamCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [ElectricParamCmplx]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConstElectricParamCmplx, name)
    __repr__ = _swig_repr
    __swig_setmethods__["value"] = _pw_material.ConstElectricParamCmplx_value_set
    __swig_getmethods__["value"] = _pw_material.ConstElectricParamCmplx_value_get
    if _newclass:
        value = _swig_property(_pw_material.ConstElectricParamCmplx_value_get, _pw_material.ConstElectricParamCmplx_value_set)

    def __init__(self):
        this = _pw_material.new_ConstElectricParamCmplx()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_ConstElectricParamCmplx
    __del__ = lambda self: None
ConstElectricParamCmplx_swigregister = _pw_material.ConstElectricParamCmplx_swigregister
ConstElectricParamCmplx_swigregister(ConstElectricParamCmplx)

class ConstMagneticParamCmplx(MagneticParamCmplx):
    __swig_setmethods__ = {}
    for _s in [MagneticParamCmplx]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstMagneticParamCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [MagneticParamCmplx]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConstMagneticParamCmplx, name)
    __repr__ = _swig_repr
    __swig_setmethods__["value"] = _pw_material.ConstMagneticParamCmplx_value_set
    __swig_getmethods__["value"] = _pw_material.ConstMagneticParamCmplx_value_get
    if _newclass:
        value = _swig_property(_pw_material.ConstMagneticParamCmplx_value_get, _pw_material.ConstMagneticParamCmplx_value_set)

    def __init__(self):
        this = _pw_material.new_ConstMagneticParamCmplx()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_ConstMagneticParamCmplx
    __del__ = lambda self: None
ConstMagneticParamCmplx_swigregister = _pw_material.ConstMagneticParamCmplx_swigregister
ConstMagneticParamCmplx_swigregister(ConstMagneticParamCmplx)

class ConstElectricCmplx(MaterialElectricCmplx):
    __swig_setmethods__ = {}
    for _s in [MaterialElectricCmplx]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstElectricCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [MaterialElectricCmplx]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConstElectricCmplx, name)
    __repr__ = _swig_repr

    def name(self):
        return _pw_material.ConstElectricCmplx_name(self)

    def get_eps_inf(self, idx):
        return _pw_material.ConstElectricCmplx_get_eps_inf(self, idx)

    def attach(self, idx, pm_param_ptr):
        return _pw_material.ConstElectricCmplx_attach(self, idx, pm_param_ptr)

    def merge(self, pm_ptr):
        return _pw_material.ConstElectricCmplx_merge(self, pm_ptr)

    def update_all(self, inplace_field, in_field1, in_field2, d1, d2, dt, n):
        return _pw_material.ConstElectricCmplx_update_all(self, inplace_field, in_field1, in_field2, d1, d2, dt, n)

    def __init__(self):
        this = _pw_material.new_ConstElectricCmplx()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_ConstElectricCmplx
    __del__ = lambda self: None
ConstElectricCmplx_swigregister = _pw_material.ConstElectricCmplx_swigregister
ConstElectricCmplx_swigregister(ConstElectricCmplx)

class ConstMagneticCmplx(MaterialMagneticCmplx):
    __swig_setmethods__ = {}
    for _s in [MaterialMagneticCmplx]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstMagneticCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [MaterialMagneticCmplx]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConstMagneticCmplx, name)
    __repr__ = _swig_repr

    def name(self):
        return _pw_material.ConstMagneticCmplx_name(self)

    def get_mu_inf(self, idx):
        return _pw_material.ConstMagneticCmplx_get_mu_inf(self, idx)

    def attach(self, idx, pm_param_ptr):
        return _pw_material.ConstMagneticCmplx_attach(self, idx, pm_param_ptr)

    def merge(self, pm_ptr):
        return _pw_material.ConstMagneticCmplx_merge(self, pm_ptr)

    def update_all(self, inplace_field, in_field1, in_field2, d1, d2, dt, n):
        return _pw_material.ConstMagneticCmplx_update_all(self, inplace_field, in_field1, in_field2, d1, d2, dt, n)

    def __init__(self):
        this = _pw_material.new_ConstMagneticCmplx()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_ConstMagneticCmplx
    __del__ = lambda self: None
ConstMagneticCmplx_swigregister = _pw_material.ConstMagneticCmplx_swigregister
ConstMagneticCmplx_swigregister(ConstMagneticCmplx)

class ConstExCmplx(ConstElectricCmplx):
    __swig_setmethods__ = {}
    for _s in [ConstElectricCmplx]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstExCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [ConstElectricCmplx]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConstExCmplx, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pw_material.new_ConstExCmplx()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_ConstExCmplx
    __del__ = lambda self: None
ConstExCmplx_swigregister = _pw_material.ConstExCmplx_swigregister
ConstExCmplx_swigregister(ConstExCmplx)

class ConstEyCmplx(ConstElectricCmplx):
    __swig_setmethods__ = {}
    for _s in [ConstElectricCmplx]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstEyCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [ConstElectricCmplx]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConstEyCmplx, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pw_material.new_ConstEyCmplx()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_ConstEyCmplx
    __del__ = lambda self: None
ConstEyCmplx_swigregister = _pw_material.ConstEyCmplx_swigregister
ConstEyCmplx_swigregister(ConstEyCmplx)

class ConstEzCmplx(ConstElectricCmplx):
    __swig_setmethods__ = {}
    for _s in [ConstElectricCmplx]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstEzCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [ConstElectricCmplx]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConstEzCmplx, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pw_material.new_ConstEzCmplx()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_ConstEzCmplx
    __del__ = lambda self: None
ConstEzCmplx_swigregister = _pw_material.ConstEzCmplx_swigregister
ConstEzCmplx_swigregister(ConstEzCmplx)

class ConstHxCmplx(ConstMagneticCmplx):
    __swig_setmethods__ = {}
    for _s in [ConstMagneticCmplx]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstHxCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [ConstMagneticCmplx]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConstHxCmplx, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pw_material.new_ConstHxCmplx()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_ConstHxCmplx
    __del__ = lambda self: None
ConstHxCmplx_swigregister = _pw_material.ConstHxCmplx_swigregister
ConstHxCmplx_swigregister(ConstHxCmplx)

class ConstHyCmplx(ConstMagneticCmplx):
    __swig_setmethods__ = {}
    for _s in [ConstMagneticCmplx]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstHyCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [ConstMagneticCmplx]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConstHyCmplx, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pw_material.new_ConstHyCmplx()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_ConstHyCmplx
    __del__ = lambda self: None
ConstHyCmplx_swigregister = _pw_material.ConstHyCmplx_swigregister
ConstHyCmplx_swigregister(ConstHyCmplx)

class ConstHzCmplx(ConstMagneticCmplx):
    __swig_setmethods__ = {}
    for _s in [ConstMagneticCmplx]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstHzCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [ConstMagneticCmplx]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConstHzCmplx, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pw_material.new_ConstHzCmplx()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_ConstHzCmplx
    __del__ = lambda self: None
ConstHzCmplx_swigregister = _pw_material.ConstHzCmplx_swigregister
ConstHzCmplx_swigregister(ConstHzCmplx)

class DielectricElectricParamCmplx(ElectricParamCmplx):
    __swig_setmethods__ = {}
    for _s in [ElectricParamCmplx]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DielectricElectricParamCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [ElectricParamCmplx]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DielectricElectricParamCmplx, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pw_material.new_DielectricElectricParamCmplx()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_DielectricElectricParamCmplx
    __del__ = lambda self: None
DielectricElectricParamCmplx_swigregister = _pw_material.DielectricElectricParamCmplx_swigregister
DielectricElectricParamCmplx_swigregister(DielectricElectricParamCmplx)

class DielectricMagneticParamCmplx(MagneticParamCmplx):
    __swig_setmethods__ = {}
    for _s in [MagneticParamCmplx]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DielectricMagneticParamCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [MagneticParamCmplx]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DielectricMagneticParamCmplx, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pw_material.new_DielectricMagneticParamCmplx()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_DielectricMagneticParamCmplx
    __del__ = lambda self: None
DielectricMagneticParamCmplx_swigregister = _pw_material.DielectricMagneticParamCmplx_swigregister
DielectricMagneticParamCmplx_swigregister(DielectricMagneticParamCmplx)

class DielectricElectricCmplx(MaterialElectricCmplx):
    __swig_setmethods__ = {}
    for _s in [MaterialElectricCmplx]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DielectricElectricCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [MaterialElectricCmplx]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DielectricElectricCmplx, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def name(self):
        return _pw_material.DielectricElectricCmplx_name(self)

    def get_eps_inf(self, idx):
        return _pw_material.DielectricElectricCmplx_get_eps_inf(self, idx)

    def attach(self, idx, pm_param_ptr):
        return _pw_material.DielectricElectricCmplx_attach(self, idx, pm_param_ptr)

    def merge(self, pm_ptr):
        return _pw_material.DielectricElectricCmplx_merge(self, pm_ptr)
    __swig_destroy__ = _pw_material.delete_DielectricElectricCmplx
    __del__ = lambda self: None
DielectricElectricCmplx_swigregister = _pw_material.DielectricElectricCmplx_swigregister
DielectricElectricCmplx_swigregister(DielectricElectricCmplx)

class DielectricMagneticCmplx(MaterialMagneticCmplx):
    __swig_setmethods__ = {}
    for _s in [MaterialMagneticCmplx]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DielectricMagneticCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [MaterialMagneticCmplx]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DielectricMagneticCmplx, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def name(self):
        return _pw_material.DielectricMagneticCmplx_name(self)

    def get_mu_inf(self, idx):
        return _pw_material.DielectricMagneticCmplx_get_mu_inf(self, idx)

    def attach(self, idx, pm_param_ptr):
        return _pw_material.DielectricMagneticCmplx_attach(self, idx, pm_param_ptr)

    def merge(self, pm_ptr):
        return _pw_material.DielectricMagneticCmplx_merge(self, pm_ptr)
    __swig_destroy__ = _pw_material.delete_DielectricMagneticCmplx
    __del__ = lambda self: None
DielectricMagneticCmplx_swigregister = _pw_material.DielectricMagneticCmplx_swigregister
DielectricMagneticCmplx_swigregister(DielectricMagneticCmplx)

class DielectricExCmplx(DielectricElectricCmplx):
    __swig_setmethods__ = {}
    for _s in [DielectricElectricCmplx]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DielectricExCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [DielectricElectricCmplx]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DielectricExCmplx, name)
    __repr__ = _swig_repr

    def update_all(self, ex, hz, hy, dy, dz, dt, n):
        return _pw_material.DielectricExCmplx_update_all(self, ex, hz, hy, dy, dz, dt, n)

    def __init__(self):
        this = _pw_material.new_DielectricExCmplx()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_DielectricExCmplx
    __del__ = lambda self: None
DielectricExCmplx_swigregister = _pw_material.DielectricExCmplx_swigregister
DielectricExCmplx_swigregister(DielectricExCmplx)

class DielectricEyCmplx(DielectricElectricCmplx):
    __swig_setmethods__ = {}
    for _s in [DielectricElectricCmplx]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DielectricEyCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [DielectricElectricCmplx]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DielectricEyCmplx, name)
    __repr__ = _swig_repr

    def update_all(self, ey, hx, hz, dz, dx, dt, n):
        return _pw_material.DielectricEyCmplx_update_all(self, ey, hx, hz, dz, dx, dt, n)

    def __init__(self):
        this = _pw_material.new_DielectricEyCmplx()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_DielectricEyCmplx
    __del__ = lambda self: None
DielectricEyCmplx_swigregister = _pw_material.DielectricEyCmplx_swigregister
DielectricEyCmplx_swigregister(DielectricEyCmplx)

class DielectricEzCmplx(DielectricElectricCmplx):
    __swig_setmethods__ = {}
    for _s in [DielectricElectricCmplx]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DielectricEzCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [DielectricElectricCmplx]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DielectricEzCmplx, name)
    __repr__ = _swig_repr

    def update_all(self, ez, hy, hx, dx, dy, dt, n):
        return _pw_material.DielectricEzCmplx_update_all(self, ez, hy, hx, dx, dy, dt, n)

    def __init__(self):
        this = _pw_material.new_DielectricEzCmplx()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_DielectricEzCmplx
    __del__ = lambda self: None
DielectricEzCmplx_swigregister = _pw_material.DielectricEzCmplx_swigregister
DielectricEzCmplx_swigregister(DielectricEzCmplx)

class DielectricHxCmplx(DielectricMagneticCmplx):
    __swig_setmethods__ = {}
    for _s in [DielectricMagneticCmplx]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DielectricHxCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [DielectricMagneticCmplx]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DielectricHxCmplx, name)
    __repr__ = _swig_repr

    def update_all(self, hx, ez, ey, dy, dz, dt, n):
        return _pw_material.DielectricHxCmplx_update_all(self, hx, ez, ey, dy, dz, dt, n)

    def __init__(self):
        this = _pw_material.new_DielectricHxCmplx()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_DielectricHxCmplx
    __del__ = lambda self: None
DielectricHxCmplx_swigregister = _pw_material.DielectricHxCmplx_swigregister
DielectricHxCmplx_swigregister(DielectricHxCmplx)

class DielectricHyCmplx(DielectricMagneticCmplx):
    __swig_setmethods__ = {}
    for _s in [DielectricMagneticCmplx]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DielectricHyCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [DielectricMagneticCmplx]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DielectricHyCmplx, name)
    __repr__ = _swig_repr

    def update_all(self, hy, ex, ez, dz, dx, dt, n):
        return _pw_material.DielectricHyCmplx_update_all(self, hy, ex, ez, dz, dx, dt, n)

    def __init__(self):
        this = _pw_material.new_DielectricHyCmplx()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_DielectricHyCmplx
    __del__ = lambda self: None
DielectricHyCmplx_swigregister = _pw_material.DielectricHyCmplx_swigregister
DielectricHyCmplx_swigregister(DielectricHyCmplx)

class DielectricHzCmplx(DielectricMagneticCmplx):
    __swig_setmethods__ = {}
    for _s in [DielectricMagneticCmplx]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DielectricHzCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [DielectricMagneticCmplx]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DielectricHzCmplx, name)
    __repr__ = _swig_repr

    def update_all(self, hz, ey, ex, dx, dy, dt, n):
        return _pw_material.DielectricHzCmplx_update_all(self, hz, ey, ex, dx, dy, dt, n)

    def __init__(self):
        this = _pw_material.new_DielectricHzCmplx()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_DielectricHzCmplx
    __del__ = lambda self: None
DielectricHzCmplx_swigregister = _pw_material.DielectricHzCmplx_swigregister
DielectricHzCmplx_swigregister(DielectricHzCmplx)

class UpmlElectricParamCmplx(ElectricParamCmplx):
    __swig_setmethods__ = {}
    for _s in [ElectricParamCmplx]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UpmlElectricParamCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [ElectricParamCmplx]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UpmlElectricParamCmplx, name)
    __repr__ = _swig_repr
    __swig_setmethods__["c1"] = _pw_material.UpmlElectricParamCmplx_c1_set
    __swig_getmethods__["c1"] = _pw_material.UpmlElectricParamCmplx_c1_get
    if _newclass:
        c1 = _swig_property(_pw_material.UpmlElectricParamCmplx_c1_get, _pw_material.UpmlElectricParamCmplx_c1_set)
    __swig_setmethods__["c2"] = _pw_material.UpmlElectricParamCmplx_c2_set
    __swig_getmethods__["c2"] = _pw_material.UpmlElectricParamCmplx_c2_get
    if _newclass:
        c2 = _swig_property(_pw_material.UpmlElectricParamCmplx_c2_get, _pw_material.UpmlElectricParamCmplx_c2_set)
    __swig_setmethods__["c3"] = _pw_material.UpmlElectricParamCmplx_c3_set
    __swig_getmethods__["c3"] = _pw_material.UpmlElectricParamCmplx_c3_get
    if _newclass:
        c3 = _swig_property(_pw_material.UpmlElectricParamCmplx_c3_get, _pw_material.UpmlElectricParamCmplx_c3_set)
    __swig_setmethods__["c4"] = _pw_material.UpmlElectricParamCmplx_c4_set
    __swig_getmethods__["c4"] = _pw_material.UpmlElectricParamCmplx_c4_get
    if _newclass:
        c4 = _swig_property(_pw_material.UpmlElectricParamCmplx_c4_get, _pw_material.UpmlElectricParamCmplx_c4_set)
    __swig_setmethods__["c5"] = _pw_material.UpmlElectricParamCmplx_c5_set
    __swig_getmethods__["c5"] = _pw_material.UpmlElectricParamCmplx_c5_get
    if _newclass:
        c5 = _swig_property(_pw_material.UpmlElectricParamCmplx_c5_get, _pw_material.UpmlElectricParamCmplx_c5_set)
    __swig_setmethods__["c6"] = _pw_material.UpmlElectricParamCmplx_c6_set
    __swig_getmethods__["c6"] = _pw_material.UpmlElectricParamCmplx_c6_get
    if _newclass:
        c6 = _swig_property(_pw_material.UpmlElectricParamCmplx_c6_get, _pw_material.UpmlElectricParamCmplx_c6_set)
    __swig_setmethods__["d"] = _pw_material.UpmlElectricParamCmplx_d_set
    __swig_getmethods__["d"] = _pw_material.UpmlElectricParamCmplx_d_get
    if _newclass:
        d = _swig_property(_pw_material.UpmlElectricParamCmplx_d_get, _pw_material.UpmlElectricParamCmplx_d_set)

    def __init__(self):
        this = _pw_material.new_UpmlElectricParamCmplx()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_UpmlElectricParamCmplx
    __del__ = lambda self: None
UpmlElectricParamCmplx_swigregister = _pw_material.UpmlElectricParamCmplx_swigregister
UpmlElectricParamCmplx_swigregister(UpmlElectricParamCmplx)

class UpmlMagneticParamCmplx(MagneticParamCmplx):
    __swig_setmethods__ = {}
    for _s in [MagneticParamCmplx]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UpmlMagneticParamCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [MagneticParamCmplx]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UpmlMagneticParamCmplx, name)
    __repr__ = _swig_repr
    __swig_setmethods__["c1"] = _pw_material.UpmlMagneticParamCmplx_c1_set
    __swig_getmethods__["c1"] = _pw_material.UpmlMagneticParamCmplx_c1_get
    if _newclass:
        c1 = _swig_property(_pw_material.UpmlMagneticParamCmplx_c1_get, _pw_material.UpmlMagneticParamCmplx_c1_set)
    __swig_setmethods__["c2"] = _pw_material.UpmlMagneticParamCmplx_c2_set
    __swig_getmethods__["c2"] = _pw_material.UpmlMagneticParamCmplx_c2_get
    if _newclass:
        c2 = _swig_property(_pw_material.UpmlMagneticParamCmplx_c2_get, _pw_material.UpmlMagneticParamCmplx_c2_set)
    __swig_setmethods__["c3"] = _pw_material.UpmlMagneticParamCmplx_c3_set
    __swig_getmethods__["c3"] = _pw_material.UpmlMagneticParamCmplx_c3_get
    if _newclass:
        c3 = _swig_property(_pw_material.UpmlMagneticParamCmplx_c3_get, _pw_material.UpmlMagneticParamCmplx_c3_set)
    __swig_setmethods__["c4"] = _pw_material.UpmlMagneticParamCmplx_c4_set
    __swig_getmethods__["c4"] = _pw_material.UpmlMagneticParamCmplx_c4_get
    if _newclass:
        c4 = _swig_property(_pw_material.UpmlMagneticParamCmplx_c4_get, _pw_material.UpmlMagneticParamCmplx_c4_set)
    __swig_setmethods__["c5"] = _pw_material.UpmlMagneticParamCmplx_c5_set
    __swig_getmethods__["c5"] = _pw_material.UpmlMagneticParamCmplx_c5_get
    if _newclass:
        c5 = _swig_property(_pw_material.UpmlMagneticParamCmplx_c5_get, _pw_material.UpmlMagneticParamCmplx_c5_set)
    __swig_setmethods__["c6"] = _pw_material.UpmlMagneticParamCmplx_c6_set
    __swig_getmethods__["c6"] = _pw_material.UpmlMagneticParamCmplx_c6_get
    if _newclass:
        c6 = _swig_property(_pw_material.UpmlMagneticParamCmplx_c6_get, _pw_material.UpmlMagneticParamCmplx_c6_set)
    __swig_setmethods__["b"] = _pw_material.UpmlMagneticParamCmplx_b_set
    __swig_getmethods__["b"] = _pw_material.UpmlMagneticParamCmplx_b_get
    if _newclass:
        b = _swig_property(_pw_material.UpmlMagneticParamCmplx_b_get, _pw_material.UpmlMagneticParamCmplx_b_set)

    def __init__(self):
        this = _pw_material.new_UpmlMagneticParamCmplx()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_UpmlMagneticParamCmplx
    __del__ = lambda self: None
UpmlMagneticParamCmplx_swigregister = _pw_material.UpmlMagneticParamCmplx_swigregister
UpmlMagneticParamCmplx_swigregister(UpmlMagneticParamCmplx)

class UpmlElectricCmplx(MaterialElectricCmplx):
    __swig_setmethods__ = {}
    for _s in [MaterialElectricCmplx]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UpmlElectricCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [MaterialElectricCmplx]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UpmlElectricCmplx, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def name(self):
        return _pw_material.UpmlElectricCmplx_name(self)

    def get_eps_inf(self, idx):
        return _pw_material.UpmlElectricCmplx_get_eps_inf(self, idx)

    def attach(self, idx, pm_param_ptr):
        return _pw_material.UpmlElectricCmplx_attach(self, idx, pm_param_ptr)

    def merge(self, pm_ptr):
        return _pw_material.UpmlElectricCmplx_merge(self, pm_ptr)
    __swig_destroy__ = _pw_material.delete_UpmlElectricCmplx
    __del__ = lambda self: None
UpmlElectricCmplx_swigregister = _pw_material.UpmlElectricCmplx_swigregister
UpmlElectricCmplx_swigregister(UpmlElectricCmplx)

class UpmlMagneticCmplx(MaterialMagneticCmplx):
    __swig_setmethods__ = {}
    for _s in [MaterialMagneticCmplx]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UpmlMagneticCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [MaterialMagneticCmplx]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UpmlMagneticCmplx, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def name(self):
        return _pw_material.UpmlMagneticCmplx_name(self)

    def get_mu_inf(self, idx):
        return _pw_material.UpmlMagneticCmplx_get_mu_inf(self, idx)

    def attach(self, idx, pm_param_ptr):
        return _pw_material.UpmlMagneticCmplx_attach(self, idx, pm_param_ptr)

    def merge(self, pm_ptr):
        return _pw_material.UpmlMagneticCmplx_merge(self, pm_ptr)
    __swig_destroy__ = _pw_material.delete_UpmlMagneticCmplx
    __del__ = lambda self: None
UpmlMagneticCmplx_swigregister = _pw_material.UpmlMagneticCmplx_swigregister
UpmlMagneticCmplx_swigregister(UpmlMagneticCmplx)

class UpmlExCmplx(UpmlElectricCmplx):
    __swig_setmethods__ = {}
    for _s in [UpmlElectricCmplx]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UpmlExCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [UpmlElectricCmplx]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UpmlExCmplx, name)
    __repr__ = _swig_repr

    def update_all(self, ex, hz, hy, dy, dz, dt, n):
        return _pw_material.UpmlExCmplx_update_all(self, ex, hz, hy, dy, dz, dt, n)

    def __init__(self):
        this = _pw_material.new_UpmlExCmplx()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_UpmlExCmplx
    __del__ = lambda self: None
UpmlExCmplx_swigregister = _pw_material.UpmlExCmplx_swigregister
UpmlExCmplx_swigregister(UpmlExCmplx)

class UpmlEyCmplx(UpmlElectricCmplx):
    __swig_setmethods__ = {}
    for _s in [UpmlElectricCmplx]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UpmlEyCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [UpmlElectricCmplx]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UpmlEyCmplx, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pw_material.new_UpmlEyCmplx()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_UpmlEyCmplx
    __del__ = lambda self: None
UpmlEyCmplx_swigregister = _pw_material.UpmlEyCmplx_swigregister
UpmlEyCmplx_swigregister(UpmlEyCmplx)

class UpmlEzCmplx(UpmlElectricCmplx):
    __swig_setmethods__ = {}
    for _s in [UpmlElectricCmplx]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UpmlEzCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [UpmlElectricCmplx]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UpmlEzCmplx, name)
    __repr__ = _swig_repr

    def update_all(self, ez, hy, hx, dx, dy, dt, n):
        return _pw_material.UpmlEzCmplx_update_all(self, ez, hy, hx, dx, dy, dt, n)

    def __init__(self):
        this = _pw_material.new_UpmlEzCmplx()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_UpmlEzCmplx
    __del__ = lambda self: None
UpmlEzCmplx_swigregister = _pw_material.UpmlEzCmplx_swigregister
UpmlEzCmplx_swigregister(UpmlEzCmplx)

class UpmlHxCmplx(UpmlMagneticCmplx):
    __swig_setmethods__ = {}
    for _s in [UpmlMagneticCmplx]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UpmlHxCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [UpmlMagneticCmplx]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UpmlHxCmplx, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pw_material.new_UpmlHxCmplx()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_UpmlHxCmplx
    __del__ = lambda self: None
UpmlHxCmplx_swigregister = _pw_material.UpmlHxCmplx_swigregister
UpmlHxCmplx_swigregister(UpmlHxCmplx)

class UpmlHyCmplx(UpmlMagneticCmplx):
    __swig_setmethods__ = {}
    for _s in [UpmlMagneticCmplx]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UpmlHyCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [UpmlMagneticCmplx]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UpmlHyCmplx, name)
    __repr__ = _swig_repr

    def update_all(self, hy, ex, ez, dz, dx, dt, n):
        return _pw_material.UpmlHyCmplx_update_all(self, hy, ex, ez, dz, dx, dt, n)

    def __init__(self):
        this = _pw_material.new_UpmlHyCmplx()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_UpmlHyCmplx
    __del__ = lambda self: None
UpmlHyCmplx_swigregister = _pw_material.UpmlHyCmplx_swigregister
UpmlHyCmplx_swigregister(UpmlHyCmplx)

class UpmlHzCmplx(UpmlMagneticCmplx):
    __swig_setmethods__ = {}
    for _s in [UpmlMagneticCmplx]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UpmlHzCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [UpmlMagneticCmplx]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UpmlHzCmplx, name)
    __repr__ = _swig_repr

    def update_all(self, hz, ey, ex, dx, dy, dt, n):
        return _pw_material.UpmlHzCmplx_update_all(self, hz, ey, ex, dx, dy, dt, n)

    def __init__(self):
        this = _pw_material.new_UpmlHzCmplx()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_UpmlHzCmplx
    __del__ = lambda self: None
UpmlHzCmplx_swigregister = _pw_material.UpmlHzCmplx_swigregister
UpmlHzCmplx_swigregister(UpmlHzCmplx)

class CpmlElectricParamCmplx(ElectricParamCmplx):
    __swig_setmethods__ = {}
    for _s in [ElectricParamCmplx]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CpmlElectricParamCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [ElectricParamCmplx]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CpmlElectricParamCmplx, name)
    __repr__ = _swig_repr
    __swig_setmethods__["b1"] = _pw_material.CpmlElectricParamCmplx_b1_set
    __swig_getmethods__["b1"] = _pw_material.CpmlElectricParamCmplx_b1_get
    if _newclass:
        b1 = _swig_property(_pw_material.CpmlElectricParamCmplx_b1_get, _pw_material.CpmlElectricParamCmplx_b1_set)
    __swig_setmethods__["b2"] = _pw_material.CpmlElectricParamCmplx_b2_set
    __swig_getmethods__["b2"] = _pw_material.CpmlElectricParamCmplx_b2_get
    if _newclass:
        b2 = _swig_property(_pw_material.CpmlElectricParamCmplx_b2_get, _pw_material.CpmlElectricParamCmplx_b2_set)
    __swig_setmethods__["c1"] = _pw_material.CpmlElectricParamCmplx_c1_set
    __swig_getmethods__["c1"] = _pw_material.CpmlElectricParamCmplx_c1_get
    if _newclass:
        c1 = _swig_property(_pw_material.CpmlElectricParamCmplx_c1_get, _pw_material.CpmlElectricParamCmplx_c1_set)
    __swig_setmethods__["c2"] = _pw_material.CpmlElectricParamCmplx_c2_set
    __swig_getmethods__["c2"] = _pw_material.CpmlElectricParamCmplx_c2_get
    if _newclass:
        c2 = _swig_property(_pw_material.CpmlElectricParamCmplx_c2_get, _pw_material.CpmlElectricParamCmplx_c2_set)
    __swig_setmethods__["kappa1"] = _pw_material.CpmlElectricParamCmplx_kappa1_set
    __swig_getmethods__["kappa1"] = _pw_material.CpmlElectricParamCmplx_kappa1_get
    if _newclass:
        kappa1 = _swig_property(_pw_material.CpmlElectricParamCmplx_kappa1_get, _pw_material.CpmlElectricParamCmplx_kappa1_set)
    __swig_setmethods__["kappa2"] = _pw_material.CpmlElectricParamCmplx_kappa2_set
    __swig_getmethods__["kappa2"] = _pw_material.CpmlElectricParamCmplx_kappa2_get
    if _newclass:
        kappa2 = _swig_property(_pw_material.CpmlElectricParamCmplx_kappa2_get, _pw_material.CpmlElectricParamCmplx_kappa2_set)
    __swig_setmethods__["psi1"] = _pw_material.CpmlElectricParamCmplx_psi1_set
    __swig_getmethods__["psi1"] = _pw_material.CpmlElectricParamCmplx_psi1_get
    if _newclass:
        psi1 = _swig_property(_pw_material.CpmlElectricParamCmplx_psi1_get, _pw_material.CpmlElectricParamCmplx_psi1_set)
    __swig_setmethods__["psi2"] = _pw_material.CpmlElectricParamCmplx_psi2_set
    __swig_getmethods__["psi2"] = _pw_material.CpmlElectricParamCmplx_psi2_get
    if _newclass:
        psi2 = _swig_property(_pw_material.CpmlElectricParamCmplx_psi2_get, _pw_material.CpmlElectricParamCmplx_psi2_set)

    def __init__(self):
        this = _pw_material.new_CpmlElectricParamCmplx()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_CpmlElectricParamCmplx
    __del__ = lambda self: None
CpmlElectricParamCmplx_swigregister = _pw_material.CpmlElectricParamCmplx_swigregister
CpmlElectricParamCmplx_swigregister(CpmlElectricParamCmplx)

class CpmlMagneticParamCmplx(MagneticParamCmplx):
    __swig_setmethods__ = {}
    for _s in [MagneticParamCmplx]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CpmlMagneticParamCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [MagneticParamCmplx]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CpmlMagneticParamCmplx, name)
    __repr__ = _swig_repr
    __swig_setmethods__["b1"] = _pw_material.CpmlMagneticParamCmplx_b1_set
    __swig_getmethods__["b1"] = _pw_material.CpmlMagneticParamCmplx_b1_get
    if _newclass:
        b1 = _swig_property(_pw_material.CpmlMagneticParamCmplx_b1_get, _pw_material.CpmlMagneticParamCmplx_b1_set)
    __swig_setmethods__["b2"] = _pw_material.CpmlMagneticParamCmplx_b2_set
    __swig_getmethods__["b2"] = _pw_material.CpmlMagneticParamCmplx_b2_get
    if _newclass:
        b2 = _swig_property(_pw_material.CpmlMagneticParamCmplx_b2_get, _pw_material.CpmlMagneticParamCmplx_b2_set)
    __swig_setmethods__["c1"] = _pw_material.CpmlMagneticParamCmplx_c1_set
    __swig_getmethods__["c1"] = _pw_material.CpmlMagneticParamCmplx_c1_get
    if _newclass:
        c1 = _swig_property(_pw_material.CpmlMagneticParamCmplx_c1_get, _pw_material.CpmlMagneticParamCmplx_c1_set)
    __swig_setmethods__["c2"] = _pw_material.CpmlMagneticParamCmplx_c2_set
    __swig_getmethods__["c2"] = _pw_material.CpmlMagneticParamCmplx_c2_get
    if _newclass:
        c2 = _swig_property(_pw_material.CpmlMagneticParamCmplx_c2_get, _pw_material.CpmlMagneticParamCmplx_c2_set)
    __swig_setmethods__["kappa1"] = _pw_material.CpmlMagneticParamCmplx_kappa1_set
    __swig_getmethods__["kappa1"] = _pw_material.CpmlMagneticParamCmplx_kappa1_get
    if _newclass:
        kappa1 = _swig_property(_pw_material.CpmlMagneticParamCmplx_kappa1_get, _pw_material.CpmlMagneticParamCmplx_kappa1_set)
    __swig_setmethods__["kappa2"] = _pw_material.CpmlMagneticParamCmplx_kappa2_set
    __swig_getmethods__["kappa2"] = _pw_material.CpmlMagneticParamCmplx_kappa2_get
    if _newclass:
        kappa2 = _swig_property(_pw_material.CpmlMagneticParamCmplx_kappa2_get, _pw_material.CpmlMagneticParamCmplx_kappa2_set)
    __swig_setmethods__["psi1"] = _pw_material.CpmlMagneticParamCmplx_psi1_set
    __swig_getmethods__["psi1"] = _pw_material.CpmlMagneticParamCmplx_psi1_get
    if _newclass:
        psi1 = _swig_property(_pw_material.CpmlMagneticParamCmplx_psi1_get, _pw_material.CpmlMagneticParamCmplx_psi1_set)
    __swig_setmethods__["psi2"] = _pw_material.CpmlMagneticParamCmplx_psi2_set
    __swig_getmethods__["psi2"] = _pw_material.CpmlMagneticParamCmplx_psi2_get
    if _newclass:
        psi2 = _swig_property(_pw_material.CpmlMagneticParamCmplx_psi2_get, _pw_material.CpmlMagneticParamCmplx_psi2_set)

    def __init__(self):
        this = _pw_material.new_CpmlMagneticParamCmplx()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_CpmlMagneticParamCmplx
    __del__ = lambda self: None
CpmlMagneticParamCmplx_swigregister = _pw_material.CpmlMagneticParamCmplx_swigregister
CpmlMagneticParamCmplx_swigregister(CpmlMagneticParamCmplx)

class CpmlElectricCmplx(MaterialElectricCmplx):
    __swig_setmethods__ = {}
    for _s in [MaterialElectricCmplx]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CpmlElectricCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [MaterialElectricCmplx]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CpmlElectricCmplx, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def name(self):
        return _pw_material.CpmlElectricCmplx_name(self)

    def get_eps_inf(self, idx):
        return _pw_material.CpmlElectricCmplx_get_eps_inf(self, idx)

    def attach(self, idx, pm_param_ptr):
        return _pw_material.CpmlElectricCmplx_attach(self, idx, pm_param_ptr)

    def merge(self, pm_ptr):
        return _pw_material.CpmlElectricCmplx_merge(self, pm_ptr)
    __swig_destroy__ = _pw_material.delete_CpmlElectricCmplx
    __del__ = lambda self: None
CpmlElectricCmplx_swigregister = _pw_material.CpmlElectricCmplx_swigregister
CpmlElectricCmplx_swigregister(CpmlElectricCmplx)

class CpmlMagneticCmplx(MaterialMagneticCmplx):
    __swig_setmethods__ = {}
    for _s in [MaterialMagneticCmplx]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CpmlMagneticCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [MaterialMagneticCmplx]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CpmlMagneticCmplx, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def name(self):
        return _pw_material.CpmlMagneticCmplx_name(self)

    def get_mu_inf(self, idx):
        return _pw_material.CpmlMagneticCmplx_get_mu_inf(self, idx)

    def attach(self, idx, pm_param_ptr):
        return _pw_material.CpmlMagneticCmplx_attach(self, idx, pm_param_ptr)

    def merge(self, pm_ptr):
        return _pw_material.CpmlMagneticCmplx_merge(self, pm_ptr)
    __swig_destroy__ = _pw_material.delete_CpmlMagneticCmplx
    __del__ = lambda self: None
CpmlMagneticCmplx_swigregister = _pw_material.CpmlMagneticCmplx_swigregister
CpmlMagneticCmplx_swigregister(CpmlMagneticCmplx)

class CpmlExCmplx(CpmlElectricCmplx):
    __swig_setmethods__ = {}
    for _s in [CpmlElectricCmplx]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CpmlExCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [CpmlElectricCmplx]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CpmlExCmplx, name)
    __repr__ = _swig_repr

    def update_all(self, ex, hz, hy, dy, dz, dt, n):
        return _pw_material.CpmlExCmplx_update_all(self, ex, hz, hy, dy, dz, dt, n)

    def __init__(self):
        this = _pw_material.new_CpmlExCmplx()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_CpmlExCmplx
    __del__ = lambda self: None
CpmlExCmplx_swigregister = _pw_material.CpmlExCmplx_swigregister
CpmlExCmplx_swigregister(CpmlExCmplx)

class CpmlEyCmplx(CpmlElectricCmplx):
    __swig_setmethods__ = {}
    for _s in [CpmlElectricCmplx]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CpmlEyCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [CpmlElectricCmplx]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CpmlEyCmplx, name)
    __repr__ = _swig_repr

    def update_all(self, ey, hx, hz, dz, dx, dt, n):
        return _pw_material.CpmlEyCmplx_update_all(self, ey, hx, hz, dz, dx, dt, n)

    def __init__(self):
        this = _pw_material.new_CpmlEyCmplx()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_CpmlEyCmplx
    __del__ = lambda self: None
CpmlEyCmplx_swigregister = _pw_material.CpmlEyCmplx_swigregister
CpmlEyCmplx_swigregister(CpmlEyCmplx)

class CpmlEzCmplx(CpmlElectricCmplx):
    __swig_setmethods__ = {}
    for _s in [CpmlElectricCmplx]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CpmlEzCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [CpmlElectricCmplx]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CpmlEzCmplx, name)
    __repr__ = _swig_repr

    def update_all(self, ez, hy, hx, dx, dy, dt, n):
        return _pw_material.CpmlEzCmplx_update_all(self, ez, hy, hx, dx, dy, dt, n)

    def __init__(self):
        this = _pw_material.new_CpmlEzCmplx()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_CpmlEzCmplx
    __del__ = lambda self: None
CpmlEzCmplx_swigregister = _pw_material.CpmlEzCmplx_swigregister
CpmlEzCmplx_swigregister(CpmlEzCmplx)

class CpmlHxCmplx(CpmlMagneticCmplx):
    __swig_setmethods__ = {}
    for _s in [CpmlMagneticCmplx]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CpmlHxCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [CpmlMagneticCmplx]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CpmlHxCmplx, name)
    __repr__ = _swig_repr

    def update_all(self, hx, ez, ey, dy, dz, dt, n):
        return _pw_material.CpmlHxCmplx_update_all(self, hx, ez, ey, dy, dz, dt, n)

    def __init__(self):
        this = _pw_material.new_CpmlHxCmplx()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_CpmlHxCmplx
    __del__ = lambda self: None
CpmlHxCmplx_swigregister = _pw_material.CpmlHxCmplx_swigregister
CpmlHxCmplx_swigregister(CpmlHxCmplx)

class CpmlHyCmplx(CpmlMagneticCmplx):
    __swig_setmethods__ = {}
    for _s in [CpmlMagneticCmplx]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CpmlHyCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [CpmlMagneticCmplx]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CpmlHyCmplx, name)
    __repr__ = _swig_repr

    def update_all(self, hy, ex, ez, dz, dx, dt, n):
        return _pw_material.CpmlHyCmplx_update_all(self, hy, ex, ez, dz, dx, dt, n)

    def __init__(self):
        this = _pw_material.new_CpmlHyCmplx()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_CpmlHyCmplx
    __del__ = lambda self: None
CpmlHyCmplx_swigregister = _pw_material.CpmlHyCmplx_swigregister
CpmlHyCmplx_swigregister(CpmlHyCmplx)

class CpmlHzCmplx(CpmlMagneticCmplx):
    __swig_setmethods__ = {}
    for _s in [CpmlMagneticCmplx]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CpmlHzCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [CpmlMagneticCmplx]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CpmlHzCmplx, name)
    __repr__ = _swig_repr

    def update_all(self, hz, ey, ex, dx, dy, dt, n):
        return _pw_material.CpmlHzCmplx_update_all(self, hz, ey, ex, dx, dy, dt, n)

    def __init__(self):
        this = _pw_material.new_CpmlHzCmplx()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_CpmlHzCmplx
    __del__ = lambda self: None
CpmlHzCmplx_swigregister = _pw_material.CpmlHzCmplx_swigregister
CpmlHzCmplx_swigregister(CpmlHzCmplx)

class DrudeElectricParamCmplx(ElectricParamCmplx):
    __swig_setmethods__ = {}
    for _s in [ElectricParamCmplx]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DrudeElectricParamCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [ElectricParamCmplx]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DrudeElectricParamCmplx, name)
    __repr__ = _swig_repr
    __swig_setmethods__["a"] = _pw_material.DrudeElectricParamCmplx_a_set
    __swig_getmethods__["a"] = _pw_material.DrudeElectricParamCmplx_a_get
    if _newclass:
        a = _swig_property(_pw_material.DrudeElectricParamCmplx_a_get, _pw_material.DrudeElectricParamCmplx_a_set)
    __swig_setmethods__["c"] = _pw_material.DrudeElectricParamCmplx_c_set
    __swig_getmethods__["c"] = _pw_material.DrudeElectricParamCmplx_c_get
    if _newclass:
        c = _swig_property(_pw_material.DrudeElectricParamCmplx_c_get, _pw_material.DrudeElectricParamCmplx_c_set)
    __swig_setmethods__["q_now"] = _pw_material.DrudeElectricParamCmplx_q_now_set
    __swig_getmethods__["q_now"] = _pw_material.DrudeElectricParamCmplx_q_now_get
    if _newclass:
        q_now = _swig_property(_pw_material.DrudeElectricParamCmplx_q_now_get, _pw_material.DrudeElectricParamCmplx_q_now_set)
    __swig_setmethods__["q_new"] = _pw_material.DrudeElectricParamCmplx_q_new_set
    __swig_getmethods__["q_new"] = _pw_material.DrudeElectricParamCmplx_q_new_get
    if _newclass:
        q_new = _swig_property(_pw_material.DrudeElectricParamCmplx_q_new_get, _pw_material.DrudeElectricParamCmplx_q_new_set)

    def set(self, a, c):
        return _pw_material.DrudeElectricParamCmplx_set(self, a, c)

    def __init__(self):
        this = _pw_material.new_DrudeElectricParamCmplx()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_DrudeElectricParamCmplx
    __del__ = lambda self: None
DrudeElectricParamCmplx_swigregister = _pw_material.DrudeElectricParamCmplx_swigregister
DrudeElectricParamCmplx_swigregister(DrudeElectricParamCmplx)

class DrudeMagneticParamCmplx(MagneticParamCmplx):
    __swig_setmethods__ = {}
    for _s in [MagneticParamCmplx]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DrudeMagneticParamCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [MagneticParamCmplx]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DrudeMagneticParamCmplx, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pw_material.new_DrudeMagneticParamCmplx()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_DrudeMagneticParamCmplx
    __del__ = lambda self: None
DrudeMagneticParamCmplx_swigregister = _pw_material.DrudeMagneticParamCmplx_swigregister
DrudeMagneticParamCmplx_swigregister(DrudeMagneticParamCmplx)

class DrudeElectricCmplx(MaterialElectricCmplx):
    __swig_setmethods__ = {}
    for _s in [MaterialElectricCmplx]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DrudeElectricCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [MaterialElectricCmplx]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DrudeElectricCmplx, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def name(self):
        return _pw_material.DrudeElectricCmplx_name(self)

    def get_eps_inf(self, idx):
        return _pw_material.DrudeElectricCmplx_get_eps_inf(self, idx)

    def attach(self, idx, pm_param_ptr):
        return _pw_material.DrudeElectricCmplx_attach(self, idx, pm_param_ptr)

    def merge(self, pm_ptr):
        return _pw_material.DrudeElectricCmplx_merge(self, pm_ptr)

    def dps_sum(self, init, drude_param):
        return _pw_material.DrudeElectricCmplx_dps_sum(self, init, drude_param)

    def update_q(self, e_now, drude_param):
        return _pw_material.DrudeElectricCmplx_update_q(self, e_now, drude_param)
    __swig_destroy__ = _pw_material.delete_DrudeElectricCmplx
    __del__ = lambda self: None
DrudeElectricCmplx_swigregister = _pw_material.DrudeElectricCmplx_swigregister
DrudeElectricCmplx_swigregister(DrudeElectricCmplx)

class DrudeExCmplx(DrudeElectricCmplx):
    __swig_setmethods__ = {}
    for _s in [DrudeElectricCmplx]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DrudeExCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [DrudeElectricCmplx]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DrudeExCmplx, name)
    __repr__ = _swig_repr

    def update_all(self, ex, hz, hy, dy, dz, dt, n):
        return _pw_material.DrudeExCmplx_update_all(self, ex, hz, hy, dy, dz, dt, n)

    def __init__(self):
        this = _pw_material.new_DrudeExCmplx()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_DrudeExCmplx
    __del__ = lambda self: None
DrudeExCmplx_swigregister = _pw_material.DrudeExCmplx_swigregister
DrudeExCmplx_swigregister(DrudeExCmplx)

class DrudeEyCmplx(DrudeElectricCmplx):
    __swig_setmethods__ = {}
    for _s in [DrudeElectricCmplx]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DrudeEyCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [DrudeElectricCmplx]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DrudeEyCmplx, name)
    __repr__ = _swig_repr

    def update_all(self, ey, hx, hz, dz, dx, dt, n):
        return _pw_material.DrudeEyCmplx_update_all(self, ey, hx, hz, dz, dx, dt, n)

    def __init__(self):
        this = _pw_material.new_DrudeEyCmplx()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_DrudeEyCmplx
    __del__ = lambda self: None
DrudeEyCmplx_swigregister = _pw_material.DrudeEyCmplx_swigregister
DrudeEyCmplx_swigregister(DrudeEyCmplx)

class DrudeEzCmplx(DrudeElectricCmplx):
    __swig_setmethods__ = {}
    for _s in [DrudeElectricCmplx]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DrudeEzCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [DrudeElectricCmplx]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DrudeEzCmplx, name)
    __repr__ = _swig_repr

    def update_all(self, ez, hy, hx, dx, dy, dt, n):
        return _pw_material.DrudeEzCmplx_update_all(self, ez, hy, hx, dx, dy, dt, n)

    def __init__(self):
        this = _pw_material.new_DrudeEzCmplx()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_DrudeEzCmplx
    __del__ = lambda self: None
DrudeEzCmplx_swigregister = _pw_material.DrudeEzCmplx_swigregister
DrudeEzCmplx_swigregister(DrudeEzCmplx)

class DrudeHxCmplx(DielectricHxCmplx):
    __swig_setmethods__ = {}
    for _s in [DielectricHxCmplx]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DrudeHxCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [DielectricHxCmplx]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DrudeHxCmplx, name)
    __repr__ = _swig_repr

    def name(self):
        return _pw_material.DrudeHxCmplx_name(self)

    def __init__(self):
        this = _pw_material.new_DrudeHxCmplx()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_DrudeHxCmplx
    __del__ = lambda self: None
DrudeHxCmplx_swigregister = _pw_material.DrudeHxCmplx_swigregister
DrudeHxCmplx_swigregister(DrudeHxCmplx)

class DrudeHyCmplx(DielectricHyCmplx):
    __swig_setmethods__ = {}
    for _s in [DielectricHyCmplx]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DrudeHyCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [DielectricHyCmplx]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DrudeHyCmplx, name)
    __repr__ = _swig_repr

    def name(self):
        return _pw_material.DrudeHyCmplx_name(self)

    def __init__(self):
        this = _pw_material.new_DrudeHyCmplx()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_DrudeHyCmplx
    __del__ = lambda self: None
DrudeHyCmplx_swigregister = _pw_material.DrudeHyCmplx_swigregister
DrudeHyCmplx_swigregister(DrudeHyCmplx)

class DrudeHzCmplx(DielectricHzCmplx):
    __swig_setmethods__ = {}
    for _s in [DielectricHzCmplx]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DrudeHzCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [DielectricHzCmplx]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DrudeHzCmplx, name)
    __repr__ = _swig_repr

    def name(self):
        return _pw_material.DrudeHzCmplx_name(self)

    def __init__(self):
        this = _pw_material.new_DrudeHzCmplx()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_DrudeHzCmplx
    __del__ = lambda self: None
DrudeHzCmplx_swigregister = _pw_material.DrudeHzCmplx_swigregister
DrudeHzCmplx_swigregister(DrudeHzCmplx)

class LorentzElectricParamCmplx(ElectricParamCmplx):
    __swig_setmethods__ = {}
    for _s in [ElectricParamCmplx]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LorentzElectricParamCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [ElectricParamCmplx]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LorentzElectricParamCmplx, name)
    __repr__ = _swig_repr
    __swig_setmethods__["a"] = _pw_material.LorentzElectricParamCmplx_a_set
    __swig_getmethods__["a"] = _pw_material.LorentzElectricParamCmplx_a_get
    if _newclass:
        a = _swig_property(_pw_material.LorentzElectricParamCmplx_a_get, _pw_material.LorentzElectricParamCmplx_a_set)
    __swig_setmethods__["c"] = _pw_material.LorentzElectricParamCmplx_c_set
    __swig_getmethods__["c"] = _pw_material.LorentzElectricParamCmplx_c_get
    if _newclass:
        c = _swig_property(_pw_material.LorentzElectricParamCmplx_c_get, _pw_material.LorentzElectricParamCmplx_c_set)
    __swig_setmethods__["l_now"] = _pw_material.LorentzElectricParamCmplx_l_now_set
    __swig_getmethods__["l_now"] = _pw_material.LorentzElectricParamCmplx_l_now_get
    if _newclass:
        l_now = _swig_property(_pw_material.LorentzElectricParamCmplx_l_now_get, _pw_material.LorentzElectricParamCmplx_l_now_set)
    __swig_setmethods__["l_new"] = _pw_material.LorentzElectricParamCmplx_l_new_set
    __swig_getmethods__["l_new"] = _pw_material.LorentzElectricParamCmplx_l_new_get
    if _newclass:
        l_new = _swig_property(_pw_material.LorentzElectricParamCmplx_l_new_get, _pw_material.LorentzElectricParamCmplx_l_new_set)

    def set(self, a, c):
        return _pw_material.LorentzElectricParamCmplx_set(self, a, c)

    def __init__(self):
        this = _pw_material.new_LorentzElectricParamCmplx()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_LorentzElectricParamCmplx
    __del__ = lambda self: None
LorentzElectricParamCmplx_swigregister = _pw_material.LorentzElectricParamCmplx_swigregister
LorentzElectricParamCmplx_swigregister(LorentzElectricParamCmplx)

class LorentzMagneticParamCmplx(MagneticParamCmplx):
    __swig_setmethods__ = {}
    for _s in [MagneticParamCmplx]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LorentzMagneticParamCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [MagneticParamCmplx]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LorentzMagneticParamCmplx, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pw_material.new_LorentzMagneticParamCmplx()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_LorentzMagneticParamCmplx
    __del__ = lambda self: None
LorentzMagneticParamCmplx_swigregister = _pw_material.LorentzMagneticParamCmplx_swigregister
LorentzMagneticParamCmplx_swigregister(LorentzMagneticParamCmplx)

class LorentzElectricCmplx(MaterialElectricCmplx):
    __swig_setmethods__ = {}
    for _s in [MaterialElectricCmplx]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LorentzElectricCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [MaterialElectricCmplx]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LorentzElectricCmplx, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def name(self):
        return _pw_material.LorentzElectricCmplx_name(self)

    def get_eps_inf(self, idx):
        return _pw_material.LorentzElectricCmplx_get_eps_inf(self, idx)

    def attach(self, idx, pm_param_ptr):
        return _pw_material.LorentzElectricCmplx_attach(self, idx, pm_param_ptr)

    def merge(self, pm_ptr):
        return _pw_material.LorentzElectricCmplx_merge(self, pm_ptr)

    def lps_sum(self, init, lorentz_param):
        return _pw_material.LorentzElectricCmplx_lps_sum(self, init, lorentz_param)

    def update_l(self, e_now, lorentz_param):
        return _pw_material.LorentzElectricCmplx_update_l(self, e_now, lorentz_param)
    __swig_destroy__ = _pw_material.delete_LorentzElectricCmplx
    __del__ = lambda self: None
LorentzElectricCmplx_swigregister = _pw_material.LorentzElectricCmplx_swigregister
LorentzElectricCmplx_swigregister(LorentzElectricCmplx)

class LorentzExCmplx(LorentzElectricCmplx):
    __swig_setmethods__ = {}
    for _s in [LorentzElectricCmplx]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LorentzExCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [LorentzElectricCmplx]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LorentzExCmplx, name)
    __repr__ = _swig_repr

    def update_all(self, ex, hz, hy, dy, dz, dt, n):
        return _pw_material.LorentzExCmplx_update_all(self, ex, hz, hy, dy, dz, dt, n)

    def __init__(self):
        this = _pw_material.new_LorentzExCmplx()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_LorentzExCmplx
    __del__ = lambda self: None
LorentzExCmplx_swigregister = _pw_material.LorentzExCmplx_swigregister
LorentzExCmplx_swigregister(LorentzExCmplx)

class LorentzEyCmplx(LorentzElectricCmplx):
    __swig_setmethods__ = {}
    for _s in [LorentzElectricCmplx]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LorentzEyCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [LorentzElectricCmplx]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LorentzEyCmplx, name)
    __repr__ = _swig_repr

    def update_all(self, ey, hx, hz, dz, dx, dt, n):
        return _pw_material.LorentzEyCmplx_update_all(self, ey, hx, hz, dz, dx, dt, n)

    def __init__(self):
        this = _pw_material.new_LorentzEyCmplx()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_LorentzEyCmplx
    __del__ = lambda self: None
LorentzEyCmplx_swigregister = _pw_material.LorentzEyCmplx_swigregister
LorentzEyCmplx_swigregister(LorentzEyCmplx)

class LorentzEzCmplx(LorentzElectricCmplx):
    __swig_setmethods__ = {}
    for _s in [LorentzElectricCmplx]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LorentzEzCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [LorentzElectricCmplx]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LorentzEzCmplx, name)
    __repr__ = _swig_repr

    def update_all(self, ez, hy, hx, dx, dy, dt, n):
        return _pw_material.LorentzEzCmplx_update_all(self, ez, hy, hx, dx, dy, dt, n)

    def __init__(self):
        this = _pw_material.new_LorentzEzCmplx()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_LorentzEzCmplx
    __del__ = lambda self: None
LorentzEzCmplx_swigregister = _pw_material.LorentzEzCmplx_swigregister
LorentzEzCmplx_swigregister(LorentzEzCmplx)

class LorentzHxCmplx(DielectricHxCmplx):
    __swig_setmethods__ = {}
    for _s in [DielectricHxCmplx]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LorentzHxCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [DielectricHxCmplx]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LorentzHxCmplx, name)
    __repr__ = _swig_repr

    def name(self):
        return _pw_material.LorentzHxCmplx_name(self)

    def __init__(self):
        this = _pw_material.new_LorentzHxCmplx()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_LorentzHxCmplx
    __del__ = lambda self: None
LorentzHxCmplx_swigregister = _pw_material.LorentzHxCmplx_swigregister
LorentzHxCmplx_swigregister(LorentzHxCmplx)

class LorentzHyCmplx(DielectricHyCmplx):
    __swig_setmethods__ = {}
    for _s in [DielectricHyCmplx]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LorentzHyCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [DielectricHyCmplx]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LorentzHyCmplx, name)
    __repr__ = _swig_repr

    def name(self):
        return _pw_material.LorentzHyCmplx_name(self)

    def __init__(self):
        this = _pw_material.new_LorentzHyCmplx()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_LorentzHyCmplx
    __del__ = lambda self: None
LorentzHyCmplx_swigregister = _pw_material.LorentzHyCmplx_swigregister
LorentzHyCmplx_swigregister(LorentzHyCmplx)

class LorentzHzCmplx(DielectricHzCmplx):
    __swig_setmethods__ = {}
    for _s in [DielectricHzCmplx]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LorentzHzCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [DielectricHzCmplx]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LorentzHzCmplx, name)
    __repr__ = _swig_repr

    def name(self):
        return _pw_material.LorentzHzCmplx_name(self)

    def __init__(self):
        this = _pw_material.new_LorentzHzCmplx()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_LorentzHzCmplx
    __del__ = lambda self: None
LorentzHzCmplx_swigregister = _pw_material.LorentzHzCmplx_swigregister
LorentzHzCmplx_swigregister(LorentzHzCmplx)

class DcpAdeElectricParamCmplx(ElectricParamCmplx):
    __swig_setmethods__ = {}
    for _s in [ElectricParamCmplx]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DcpAdeElectricParamCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [ElectricParamCmplx]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DcpAdeElectricParamCmplx, name)
    __repr__ = _swig_repr
    __swig_setmethods__["a"] = _pw_material.DcpAdeElectricParamCmplx_a_set
    __swig_getmethods__["a"] = _pw_material.DcpAdeElectricParamCmplx_a_get
    if _newclass:
        a = _swig_property(_pw_material.DcpAdeElectricParamCmplx_a_get, _pw_material.DcpAdeElectricParamCmplx_a_set)
    __swig_setmethods__["b"] = _pw_material.DcpAdeElectricParamCmplx_b_set
    __swig_getmethods__["b"] = _pw_material.DcpAdeElectricParamCmplx_b_get
    if _newclass:
        b = _swig_property(_pw_material.DcpAdeElectricParamCmplx_b_get, _pw_material.DcpAdeElectricParamCmplx_b_set)
    __swig_setmethods__["c"] = _pw_material.DcpAdeElectricParamCmplx_c_set
    __swig_getmethods__["c"] = _pw_material.DcpAdeElectricParamCmplx_c_get
    if _newclass:
        c = _swig_property(_pw_material.DcpAdeElectricParamCmplx_c_get, _pw_material.DcpAdeElectricParamCmplx_c_set)
    __swig_setmethods__["e_old"] = _pw_material.DcpAdeElectricParamCmplx_e_old_set
    __swig_getmethods__["e_old"] = _pw_material.DcpAdeElectricParamCmplx_e_old_get
    if _newclass:
        e_old = _swig_property(_pw_material.DcpAdeElectricParamCmplx_e_old_get, _pw_material.DcpAdeElectricParamCmplx_e_old_set)
    __swig_setmethods__["q_old"] = _pw_material.DcpAdeElectricParamCmplx_q_old_set
    __swig_getmethods__["q_old"] = _pw_material.DcpAdeElectricParamCmplx_q_old_get
    if _newclass:
        q_old = _swig_property(_pw_material.DcpAdeElectricParamCmplx_q_old_get, _pw_material.DcpAdeElectricParamCmplx_q_old_set)
    __swig_setmethods__["q_now"] = _pw_material.DcpAdeElectricParamCmplx_q_now_set
    __swig_getmethods__["q_now"] = _pw_material.DcpAdeElectricParamCmplx_q_now_get
    if _newclass:
        q_now = _swig_property(_pw_material.DcpAdeElectricParamCmplx_q_now_get, _pw_material.DcpAdeElectricParamCmplx_q_now_set)
    __swig_setmethods__["p_old"] = _pw_material.DcpAdeElectricParamCmplx_p_old_set
    __swig_getmethods__["p_old"] = _pw_material.DcpAdeElectricParamCmplx_p_old_get
    if _newclass:
        p_old = _swig_property(_pw_material.DcpAdeElectricParamCmplx_p_old_get, _pw_material.DcpAdeElectricParamCmplx_p_old_set)
    __swig_setmethods__["p_now"] = _pw_material.DcpAdeElectricParamCmplx_p_now_set
    __swig_getmethods__["p_now"] = _pw_material.DcpAdeElectricParamCmplx_p_now_get
    if _newclass:
        p_now = _swig_property(_pw_material.DcpAdeElectricParamCmplx_p_now_get, _pw_material.DcpAdeElectricParamCmplx_p_now_set)

    def set(self, a, b, c):
        return _pw_material.DcpAdeElectricParamCmplx_set(self, a, b, c)

    def __init__(self):
        this = _pw_material.new_DcpAdeElectricParamCmplx()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_DcpAdeElectricParamCmplx
    __del__ = lambda self: None
DcpAdeElectricParamCmplx_swigregister = _pw_material.DcpAdeElectricParamCmplx_swigregister
DcpAdeElectricParamCmplx_swigregister(DcpAdeElectricParamCmplx)

class DcpAdeMagneticParamCmplx(MagneticParamCmplx):
    __swig_setmethods__ = {}
    for _s in [MagneticParamCmplx]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DcpAdeMagneticParamCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [MagneticParamCmplx]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DcpAdeMagneticParamCmplx, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pw_material.new_DcpAdeMagneticParamCmplx()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_DcpAdeMagneticParamCmplx
    __del__ = lambda self: None
DcpAdeMagneticParamCmplx_swigregister = _pw_material.DcpAdeMagneticParamCmplx_swigregister
DcpAdeMagneticParamCmplx_swigregister(DcpAdeMagneticParamCmplx)

class DcpAdeElectricCmplx(MaterialElectricCmplx):
    __swig_setmethods__ = {}
    for _s in [MaterialElectricCmplx]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DcpAdeElectricCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [MaterialElectricCmplx]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DcpAdeElectricCmplx, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def name(self):
        return _pw_material.DcpAdeElectricCmplx_name(self)

    def get_eps_inf(self, idx):
        return _pw_material.DcpAdeElectricCmplx_get_eps_inf(self, idx)

    def attach(self, idx, pm_param_ptr):
        return _pw_material.DcpAdeElectricCmplx_attach(self, idx, pm_param_ptr)

    def merge(self, pm_ptr):
        return _pw_material.DcpAdeElectricCmplx_merge(self, pm_ptr)

    def dps_sum(self, init, dcp_param):
        return _pw_material.DcpAdeElectricCmplx_dps_sum(self, init, dcp_param)

    def cps_sum(self, init, dcp_param):
        return _pw_material.DcpAdeElectricCmplx_cps_sum(self, init, dcp_param)

    def update_q(self, e_old, e_now, e_new, dcp_param):
        return _pw_material.DcpAdeElectricCmplx_update_q(self, e_old, e_now, e_new, dcp_param)

    def update_p(self, e_old, e_now, e_new, dcp_param):
        return _pw_material.DcpAdeElectricCmplx_update_p(self, e_old, e_now, e_new, dcp_param)
    __swig_destroy__ = _pw_material.delete_DcpAdeElectricCmplx
    __del__ = lambda self: None
DcpAdeElectricCmplx_swigregister = _pw_material.DcpAdeElectricCmplx_swigregister
DcpAdeElectricCmplx_swigregister(DcpAdeElectricCmplx)

class DcpAdeExCmplx(DcpAdeElectricCmplx):
    __swig_setmethods__ = {}
    for _s in [DcpAdeElectricCmplx]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DcpAdeExCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [DcpAdeElectricCmplx]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DcpAdeExCmplx, name)
    __repr__ = _swig_repr

    def update_all(self, ex, hz, hy, dy, dz, dt, n):
        return _pw_material.DcpAdeExCmplx_update_all(self, ex, hz, hy, dy, dz, dt, n)

    def __init__(self):
        this = _pw_material.new_DcpAdeExCmplx()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_DcpAdeExCmplx
    __del__ = lambda self: None
DcpAdeExCmplx_swigregister = _pw_material.DcpAdeExCmplx_swigregister
DcpAdeExCmplx_swigregister(DcpAdeExCmplx)

class DcpAdeEyCmplx(DcpAdeElectricCmplx):
    __swig_setmethods__ = {}
    for _s in [DcpAdeElectricCmplx]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DcpAdeEyCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [DcpAdeElectricCmplx]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DcpAdeEyCmplx, name)
    __repr__ = _swig_repr

    def update_all(self, ey, hx, hz, dz, dx, dt, n):
        return _pw_material.DcpAdeEyCmplx_update_all(self, ey, hx, hz, dz, dx, dt, n)

    def __init__(self):
        this = _pw_material.new_DcpAdeEyCmplx()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_DcpAdeEyCmplx
    __del__ = lambda self: None
DcpAdeEyCmplx_swigregister = _pw_material.DcpAdeEyCmplx_swigregister
DcpAdeEyCmplx_swigregister(DcpAdeEyCmplx)

class DcpAdeEzCmplx(DcpAdeElectricCmplx):
    __swig_setmethods__ = {}
    for _s in [DcpAdeElectricCmplx]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DcpAdeEzCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [DcpAdeElectricCmplx]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DcpAdeEzCmplx, name)
    __repr__ = _swig_repr

    def update_all(self, ez, hy, hx, dx, dy, dt, n):
        return _pw_material.DcpAdeEzCmplx_update_all(self, ez, hy, hx, dx, dy, dt, n)

    def __init__(self):
        this = _pw_material.new_DcpAdeEzCmplx()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_DcpAdeEzCmplx
    __del__ = lambda self: None
DcpAdeEzCmplx_swigregister = _pw_material.DcpAdeEzCmplx_swigregister
DcpAdeEzCmplx_swigregister(DcpAdeEzCmplx)

class DcpAdeHxCmplx(DielectricHxCmplx):
    __swig_setmethods__ = {}
    for _s in [DielectricHxCmplx]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DcpAdeHxCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [DielectricHxCmplx]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DcpAdeHxCmplx, name)
    __repr__ = _swig_repr

    def name(self):
        return _pw_material.DcpAdeHxCmplx_name(self)

    def __init__(self):
        this = _pw_material.new_DcpAdeHxCmplx()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_DcpAdeHxCmplx
    __del__ = lambda self: None
DcpAdeHxCmplx_swigregister = _pw_material.DcpAdeHxCmplx_swigregister
DcpAdeHxCmplx_swigregister(DcpAdeHxCmplx)

class DcpAdeHyCmplx(DielectricHyCmplx):
    __swig_setmethods__ = {}
    for _s in [DielectricHyCmplx]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DcpAdeHyCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [DielectricHyCmplx]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DcpAdeHyCmplx, name)
    __repr__ = _swig_repr

    def name(self):
        return _pw_material.DcpAdeHyCmplx_name(self)

    def __init__(self):
        this = _pw_material.new_DcpAdeHyCmplx()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_DcpAdeHyCmplx
    __del__ = lambda self: None
DcpAdeHyCmplx_swigregister = _pw_material.DcpAdeHyCmplx_swigregister
DcpAdeHyCmplx_swigregister(DcpAdeHyCmplx)

class DcpAdeHzCmplx(DielectricHzCmplx):
    __swig_setmethods__ = {}
    for _s in [DielectricHzCmplx]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DcpAdeHzCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [DielectricHzCmplx]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DcpAdeHzCmplx, name)
    __repr__ = _swig_repr

    def name(self):
        return _pw_material.DcpAdeHzCmplx_name(self)

    def __init__(self):
        this = _pw_material.new_DcpAdeHzCmplx()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_DcpAdeHzCmplx
    __del__ = lambda self: None
DcpAdeHzCmplx_swigregister = _pw_material.DcpAdeHzCmplx_swigregister
DcpAdeHzCmplx_swigregister(DcpAdeHzCmplx)

class DcpPlrcElectricParamCmplx(ElectricParamCmplx):
    __swig_setmethods__ = {}
    for _s in [ElectricParamCmplx]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DcpPlrcElectricParamCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [ElectricParamCmplx]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DcpPlrcElectricParamCmplx, name)
    __repr__ = _swig_repr
    __swig_setmethods__["a"] = _pw_material.DcpPlrcElectricParamCmplx_a_set
    __swig_getmethods__["a"] = _pw_material.DcpPlrcElectricParamCmplx_a_get
    if _newclass:
        a = _swig_property(_pw_material.DcpPlrcElectricParamCmplx_a_get, _pw_material.DcpPlrcElectricParamCmplx_a_set)
    __swig_setmethods__["b"] = _pw_material.DcpPlrcElectricParamCmplx_b_set
    __swig_getmethods__["b"] = _pw_material.DcpPlrcElectricParamCmplx_b_get
    if _newclass:
        b = _swig_property(_pw_material.DcpPlrcElectricParamCmplx_b_get, _pw_material.DcpPlrcElectricParamCmplx_b_set)
    __swig_setmethods__["c"] = _pw_material.DcpPlrcElectricParamCmplx_c_set
    __swig_getmethods__["c"] = _pw_material.DcpPlrcElectricParamCmplx_c_get
    if _newclass:
        c = _swig_property(_pw_material.DcpPlrcElectricParamCmplx_c_get, _pw_material.DcpPlrcElectricParamCmplx_c_set)
    __swig_setmethods__["psi_dp_re"] = _pw_material.DcpPlrcElectricParamCmplx_psi_dp_re_set
    __swig_getmethods__["psi_dp_re"] = _pw_material.DcpPlrcElectricParamCmplx_psi_dp_re_get
    if _newclass:
        psi_dp_re = _swig_property(_pw_material.DcpPlrcElectricParamCmplx_psi_dp_re_get, _pw_material.DcpPlrcElectricParamCmplx_psi_dp_re_set)
    __swig_setmethods__["psi_dp_im"] = _pw_material.DcpPlrcElectricParamCmplx_psi_dp_im_set
    __swig_getmethods__["psi_dp_im"] = _pw_material.DcpPlrcElectricParamCmplx_psi_dp_im_get
    if _newclass:
        psi_dp_im = _swig_property(_pw_material.DcpPlrcElectricParamCmplx_psi_dp_im_get, _pw_material.DcpPlrcElectricParamCmplx_psi_dp_im_set)
    __swig_setmethods__["psi_cp_re"] = _pw_material.DcpPlrcElectricParamCmplx_psi_cp_re_set
    __swig_getmethods__["psi_cp_re"] = _pw_material.DcpPlrcElectricParamCmplx_psi_cp_re_get
    if _newclass:
        psi_cp_re = _swig_property(_pw_material.DcpPlrcElectricParamCmplx_psi_cp_re_get, _pw_material.DcpPlrcElectricParamCmplx_psi_cp_re_set)
    __swig_setmethods__["psi_cp_im"] = _pw_material.DcpPlrcElectricParamCmplx_psi_cp_im_set
    __swig_getmethods__["psi_cp_im"] = _pw_material.DcpPlrcElectricParamCmplx_psi_cp_im_get
    if _newclass:
        psi_cp_im = _swig_property(_pw_material.DcpPlrcElectricParamCmplx_psi_cp_im_get, _pw_material.DcpPlrcElectricParamCmplx_psi_cp_im_set)

    def set(self, a, b, c):
        return _pw_material.DcpPlrcElectricParamCmplx_set(self, a, b, c)

    def __init__(self):
        this = _pw_material.new_DcpPlrcElectricParamCmplx()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_DcpPlrcElectricParamCmplx
    __del__ = lambda self: None
DcpPlrcElectricParamCmplx_swigregister = _pw_material.DcpPlrcElectricParamCmplx_swigregister
DcpPlrcElectricParamCmplx_swigregister(DcpPlrcElectricParamCmplx)

class DcpPlrcMagneticParamCmplx(MagneticParamCmplx):
    __swig_setmethods__ = {}
    for _s in [MagneticParamCmplx]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DcpPlrcMagneticParamCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [MagneticParamCmplx]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DcpPlrcMagneticParamCmplx, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pw_material.new_DcpPlrcMagneticParamCmplx()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_DcpPlrcMagneticParamCmplx
    __del__ = lambda self: None
DcpPlrcMagneticParamCmplx_swigregister = _pw_material.DcpPlrcMagneticParamCmplx_swigregister
DcpPlrcMagneticParamCmplx_swigregister(DcpPlrcMagneticParamCmplx)

class DcpPlrcElectricCmplx(MaterialElectricCmplx):
    __swig_setmethods__ = {}
    for _s in [MaterialElectricCmplx]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DcpPlrcElectricCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [MaterialElectricCmplx]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DcpPlrcElectricCmplx, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def name(self):
        return _pw_material.DcpPlrcElectricCmplx_name(self)

    def get_eps_inf(self, idx):
        return _pw_material.DcpPlrcElectricCmplx_get_eps_inf(self, idx)

    def attach(self, idx, pm_param_ptr):
        return _pw_material.DcpPlrcElectricCmplx_attach(self, idx, pm_param_ptr)

    def merge(self, pm_ptr):
        return _pw_material.DcpPlrcElectricCmplx_merge(self, pm_ptr)

    def update_psi_dp(self, e_now, e_new, dcp_param):
        return _pw_material.DcpPlrcElectricCmplx_update_psi_dp(self, e_now, e_new, dcp_param)

    def update_psi_cp(self, e_now, e_new, dcp_param):
        return _pw_material.DcpPlrcElectricCmplx_update_psi_cp(self, e_now, e_new, dcp_param)

    def psi_total(self, dcp_param):
        return _pw_material.DcpPlrcElectricCmplx_psi_total(self, dcp_param)
    __swig_destroy__ = _pw_material.delete_DcpPlrcElectricCmplx
    __del__ = lambda self: None
DcpPlrcElectricCmplx_swigregister = _pw_material.DcpPlrcElectricCmplx_swigregister
DcpPlrcElectricCmplx_swigregister(DcpPlrcElectricCmplx)

class DcpPlrcExCmplx(DcpPlrcElectricCmplx):
    __swig_setmethods__ = {}
    for _s in [DcpPlrcElectricCmplx]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DcpPlrcExCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [DcpPlrcElectricCmplx]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DcpPlrcExCmplx, name)
    __repr__ = _swig_repr

    def update_all(self, ex, hz, hy, dy, dz, dt, n):
        return _pw_material.DcpPlrcExCmplx_update_all(self, ex, hz, hy, dy, dz, dt, n)

    def __init__(self):
        this = _pw_material.new_DcpPlrcExCmplx()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_DcpPlrcExCmplx
    __del__ = lambda self: None
DcpPlrcExCmplx_swigregister = _pw_material.DcpPlrcExCmplx_swigregister
DcpPlrcExCmplx_swigregister(DcpPlrcExCmplx)

class DcpPlrcEyCmplx(DcpPlrcElectricCmplx):
    __swig_setmethods__ = {}
    for _s in [DcpPlrcElectricCmplx]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DcpPlrcEyCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [DcpPlrcElectricCmplx]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DcpPlrcEyCmplx, name)
    __repr__ = _swig_repr

    def update_all(self, ey, hx, hz, dz, dx, dt, n):
        return _pw_material.DcpPlrcEyCmplx_update_all(self, ey, hx, hz, dz, dx, dt, n)

    def __init__(self):
        this = _pw_material.new_DcpPlrcEyCmplx()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_DcpPlrcEyCmplx
    __del__ = lambda self: None
DcpPlrcEyCmplx_swigregister = _pw_material.DcpPlrcEyCmplx_swigregister
DcpPlrcEyCmplx_swigregister(DcpPlrcEyCmplx)

class DcpPlrcEzCmplx(DcpPlrcElectricCmplx):
    __swig_setmethods__ = {}
    for _s in [DcpPlrcElectricCmplx]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DcpPlrcEzCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [DcpPlrcElectricCmplx]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DcpPlrcEzCmplx, name)
    __repr__ = _swig_repr

    def update_all(self, ez, hy, hx, dx, dy, dt, n):
        return _pw_material.DcpPlrcEzCmplx_update_all(self, ez, hy, hx, dx, dy, dt, n)

    def __init__(self):
        this = _pw_material.new_DcpPlrcEzCmplx()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_DcpPlrcEzCmplx
    __del__ = lambda self: None
DcpPlrcEzCmplx_swigregister = _pw_material.DcpPlrcEzCmplx_swigregister
DcpPlrcEzCmplx_swigregister(DcpPlrcEzCmplx)

class DcpPlrcHxCmplx(DielectricHxCmplx):
    __swig_setmethods__ = {}
    for _s in [DielectricHxCmplx]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DcpPlrcHxCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [DielectricHxCmplx]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DcpPlrcHxCmplx, name)
    __repr__ = _swig_repr

    def name(self):
        return _pw_material.DcpPlrcHxCmplx_name(self)

    def __init__(self):
        this = _pw_material.new_DcpPlrcHxCmplx()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_DcpPlrcHxCmplx
    __del__ = lambda self: None
DcpPlrcHxCmplx_swigregister = _pw_material.DcpPlrcHxCmplx_swigregister
DcpPlrcHxCmplx_swigregister(DcpPlrcHxCmplx)

class DcpPlrcHyCmplx(DielectricHyCmplx):
    __swig_setmethods__ = {}
    for _s in [DielectricHyCmplx]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DcpPlrcHyCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [DielectricHyCmplx]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DcpPlrcHyCmplx, name)
    __repr__ = _swig_repr

    def name(self):
        return _pw_material.DcpPlrcHyCmplx_name(self)

    def __init__(self):
        this = _pw_material.new_DcpPlrcHyCmplx()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_DcpPlrcHyCmplx
    __del__ = lambda self: None
DcpPlrcHyCmplx_swigregister = _pw_material.DcpPlrcHyCmplx_swigregister
DcpPlrcHyCmplx_swigregister(DcpPlrcHyCmplx)

class DcpPlrcHzCmplx(DielectricHzCmplx):
    __swig_setmethods__ = {}
    for _s in [DielectricHzCmplx]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DcpPlrcHzCmplx, name, value)
    __swig_getmethods__ = {}
    for _s in [DielectricHzCmplx]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DcpPlrcHzCmplx, name)
    __repr__ = _swig_repr

    def name(self):
        return _pw_material.DcpPlrcHzCmplx_name(self)

    def __init__(self):
        this = _pw_material.new_DcpPlrcHzCmplx()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_DcpPlrcHzCmplx
    __del__ = lambda self: None
DcpPlrcHzCmplx_swigregister = _pw_material.DcpPlrcHzCmplx_swigregister
DcpPlrcHzCmplx_swigregister(DcpPlrcHzCmplx)

class Dm2ElectricParamReal(ElectricParamReal):
    __swig_setmethods__ = {}
    for _s in [ElectricParamReal]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Dm2ElectricParamReal, name, value)
    __swig_getmethods__ = {}
    for _s in [ElectricParamReal]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Dm2ElectricParamReal, name)
    __repr__ = _swig_repr
    __swig_setmethods__["omega"] = _pw_material.Dm2ElectricParamReal_omega_set
    __swig_getmethods__["omega"] = _pw_material.Dm2ElectricParamReal_omega_get
    if _newclass:
        omega = _swig_property(_pw_material.Dm2ElectricParamReal_omega_get, _pw_material.Dm2ElectricParamReal_omega_set)
    __swig_setmethods__["n_atom"] = _pw_material.Dm2ElectricParamReal_n_atom_set
    __swig_getmethods__["n_atom"] = _pw_material.Dm2ElectricParamReal_n_atom_get
    if _newclass:
        n_atom = _swig_property(_pw_material.Dm2ElectricParamReal_n_atom_get, _pw_material.Dm2ElectricParamReal_n_atom_set)
    __swig_setmethods__["rho30"] = _pw_material.Dm2ElectricParamReal_rho30_set
    __swig_getmethods__["rho30"] = _pw_material.Dm2ElectricParamReal_rho30_get
    if _newclass:
        rho30 = _swig_property(_pw_material.Dm2ElectricParamReal_rho30_get, _pw_material.Dm2ElectricParamReal_rho30_set)
    __swig_setmethods__["gamma"] = _pw_material.Dm2ElectricParamReal_gamma_set
    __swig_getmethods__["gamma"] = _pw_material.Dm2ElectricParamReal_gamma_get
    if _newclass:
        gamma = _swig_property(_pw_material.Dm2ElectricParamReal_gamma_get, _pw_material.Dm2ElectricParamReal_gamma_set)
    __swig_setmethods__["t1"] = _pw_material.Dm2ElectricParamReal_t1_set
    __swig_getmethods__["t1"] = _pw_material.Dm2ElectricParamReal_t1_get
    if _newclass:
        t1 = _swig_property(_pw_material.Dm2ElectricParamReal_t1_get, _pw_material.Dm2ElectricParamReal_t1_set)
    __swig_setmethods__["t2"] = _pw_material.Dm2ElectricParamReal_t2_set
    __swig_getmethods__["t2"] = _pw_material.Dm2ElectricParamReal_t2_get
    if _newclass:
        t2 = _swig_property(_pw_material.Dm2ElectricParamReal_t2_get, _pw_material.Dm2ElectricParamReal_t2_set)
    __swig_setmethods__["hbar"] = _pw_material.Dm2ElectricParamReal_hbar_set
    __swig_getmethods__["hbar"] = _pw_material.Dm2ElectricParamReal_hbar_get
    if _newclass:
        hbar = _swig_property(_pw_material.Dm2ElectricParamReal_hbar_get, _pw_material.Dm2ElectricParamReal_hbar_set)
    __swig_setmethods__["rtol"] = _pw_material.Dm2ElectricParamReal_rtol_set
    __swig_getmethods__["rtol"] = _pw_material.Dm2ElectricParamReal_rtol_get
    if _newclass:
        rtol = _swig_property(_pw_material.Dm2ElectricParamReal_rtol_get, _pw_material.Dm2ElectricParamReal_rtol_set)
    __swig_setmethods__["u"] = _pw_material.Dm2ElectricParamReal_u_set
    __swig_getmethods__["u"] = _pw_material.Dm2ElectricParamReal_u_get
    if _newclass:
        u = _swig_property(_pw_material.Dm2ElectricParamReal_u_get, _pw_material.Dm2ElectricParamReal_u_set)

    def set(self, omega, n):
        return _pw_material.Dm2ElectricParamReal_set(self, omega, n)

    def __init__(self):
        this = _pw_material.new_Dm2ElectricParamReal()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_Dm2ElectricParamReal
    __del__ = lambda self: None
Dm2ElectricParamReal_swigregister = _pw_material.Dm2ElectricParamReal_swigregister
Dm2ElectricParamReal_swigregister(Dm2ElectricParamReal)

class Dm2MagneticParamReal(MagneticParamReal):
    __swig_setmethods__ = {}
    for _s in [MagneticParamReal]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Dm2MagneticParamReal, name, value)
    __swig_getmethods__ = {}
    for _s in [MagneticParamReal]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Dm2MagneticParamReal, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pw_material.new_Dm2MagneticParamReal()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_Dm2MagneticParamReal
    __del__ = lambda self: None
Dm2MagneticParamReal_swigregister = _pw_material.Dm2MagneticParamReal_swigregister
Dm2MagneticParamReal_swigregister(Dm2MagneticParamReal)

class Dm2ElectricReal(MaterialElectricReal):
    __swig_setmethods__ = {}
    for _s in [MaterialElectricReal]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Dm2ElectricReal, name, value)
    __swig_getmethods__ = {}
    for _s in [MaterialElectricReal]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Dm2ElectricReal, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def get_rho(self, idx, bin, rho_idx, t):
        return _pw_material.Dm2ElectricReal_get_rho(self, idx, bin, rho_idx, t)

    def get_u(self, idx, t, u):
        return _pw_material.Dm2ElectricReal_get_u(self, idx, t, u)

    def get_v(self, idx, t, v):
        return _pw_material.Dm2ElectricReal_get_v(self, idx, t, v)

    def get_w(self, idx, t, w):
        return _pw_material.Dm2ElectricReal_get_w(self, idx, t, w)

    def name(self):
        return _pw_material.Dm2ElectricReal_name(self)

    def get_eps_inf(self, idx):
        return _pw_material.Dm2ElectricReal_get_eps_inf(self, idx)

    def attach(self, idx, pm_param_ptr):
        return _pw_material.Dm2ElectricReal_attach(self, idx, pm_param_ptr)

    def merge(self, pm_ptr):
        return _pw_material.Dm2ElectricReal_merge(self, pm_ptr)
    __swig_destroy__ = _pw_material.delete_Dm2ElectricReal
    __del__ = lambda self: None
Dm2ElectricReal_swigregister = _pw_material.Dm2ElectricReal_swigregister
Dm2ElectricReal_swigregister(Dm2ElectricReal)

class Dm2ExReal(Dm2ElectricReal):
    __swig_setmethods__ = {}
    for _s in [Dm2ElectricReal]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Dm2ExReal, name, value)
    __swig_getmethods__ = {}
    for _s in [Dm2ElectricReal]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Dm2ExReal, name)
    __repr__ = _swig_repr

    def update_all(self, ex, hz, hy, dy, dz, dt, n):
        return _pw_material.Dm2ExReal_update_all(self, ex, hz, hy, dy, dz, dt, n)

    def __init__(self):
        this = _pw_material.new_Dm2ExReal()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_Dm2ExReal
    __del__ = lambda self: None
Dm2ExReal_swigregister = _pw_material.Dm2ExReal_swigregister
Dm2ExReal_swigregister(Dm2ExReal)

class Dm2EyReal(Dm2ElectricReal):
    __swig_setmethods__ = {}
    for _s in [Dm2ElectricReal]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Dm2EyReal, name, value)
    __swig_getmethods__ = {}
    for _s in [Dm2ElectricReal]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Dm2EyReal, name)
    __repr__ = _swig_repr

    def update_all(self, ey, hx, hz, dz, dx, dt, n):
        return _pw_material.Dm2EyReal_update_all(self, ey, hx, hz, dz, dx, dt, n)

    def __init__(self):
        this = _pw_material.new_Dm2EyReal()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_Dm2EyReal
    __del__ = lambda self: None
Dm2EyReal_swigregister = _pw_material.Dm2EyReal_swigregister
Dm2EyReal_swigregister(Dm2EyReal)

class Dm2EzReal(Dm2ElectricReal):
    __swig_setmethods__ = {}
    for _s in [Dm2ElectricReal]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Dm2EzReal, name, value)
    __swig_getmethods__ = {}
    for _s in [Dm2ElectricReal]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Dm2EzReal, name)
    __repr__ = _swig_repr

    def update_all(self, ez, hy, hx, dx, dy, dt, n):
        return _pw_material.Dm2EzReal_update_all(self, ez, hy, hx, dx, dy, dt, n)

    def __init__(self):
        this = _pw_material.new_Dm2EzReal()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_Dm2EzReal
    __del__ = lambda self: None
Dm2EzReal_swigregister = _pw_material.Dm2EzReal_swigregister
Dm2EzReal_swigregister(Dm2EzReal)

class Dm2HxReal(DielectricHxReal):
    __swig_setmethods__ = {}
    for _s in [DielectricHxReal]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Dm2HxReal, name, value)
    __swig_getmethods__ = {}
    for _s in [DielectricHxReal]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Dm2HxReal, name)
    __repr__ = _swig_repr

    def name(self):
        return _pw_material.Dm2HxReal_name(self)

    def __init__(self):
        this = _pw_material.new_Dm2HxReal()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_Dm2HxReal
    __del__ = lambda self: None
Dm2HxReal_swigregister = _pw_material.Dm2HxReal_swigregister
Dm2HxReal_swigregister(Dm2HxReal)

class Dm2HyReal(DielectricHyReal):
    __swig_setmethods__ = {}
    for _s in [DielectricHyReal]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Dm2HyReal, name, value)
    __swig_getmethods__ = {}
    for _s in [DielectricHyReal]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Dm2HyReal, name)
    __repr__ = _swig_repr

    def update_all(self, hy, ex, ez, dz, dx, dt, n):
        return _pw_material.Dm2HyReal_update_all(self, hy, ex, ez, dz, dx, dt, n)

    def name(self):
        return _pw_material.Dm2HyReal_name(self)

    def __init__(self):
        this = _pw_material.new_Dm2HyReal()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_Dm2HyReal
    __del__ = lambda self: None
Dm2HyReal_swigregister = _pw_material.Dm2HyReal_swigregister
Dm2HyReal_swigregister(Dm2HyReal)

class Dm2HzReal(DielectricHzReal):
    __swig_setmethods__ = {}
    for _s in [DielectricHzReal]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Dm2HzReal, name, value)
    __swig_getmethods__ = {}
    for _s in [DielectricHzReal]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Dm2HzReal, name)
    __repr__ = _swig_repr

    def name(self):
        return _pw_material.Dm2HzReal_name(self)

    def __init__(self):
        this = _pw_material.new_Dm2HzReal()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pw_material.delete_Dm2HzReal
    __del__ = lambda self: None
Dm2HzReal_swigregister = _pw_material.Dm2HzReal_swigregister
Dm2HzReal_swigregister(Dm2HzReal)

# This file is compatible with both classic and new-style classes.


